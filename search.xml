<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Python实现树莓派摄像头持续录像并传送到主机</title>
      <link href="/2020/12/03/raspberry-pi-camera/"/>
      <url>/2020/12/03/raspberry-pi-camera/</url>
      
        <content type="html"><![CDATA[<p>关于树莓派，想必从事嵌入式开发的开发者都有听过，树莓派原名为<code>Raspberry Pi</code>，也就是它的英文读法，树莓派诞生于英国，由“Raspberry Pi 基金会”这个慈善组织注册开发。埃•厄普顿就是该项目的头目。在2012年的3月，英国剑桥大学埃本•阿普顿（Eben Epton）正式发售世界上最小的台式机，又称卡片式电脑，外形只有信用卡大小，却具有电脑的所有基本功能，这就是Raspberry Pi电脑板，中文译名”树莓派”！</p><p>树莓派作为一个轻便迷你的小终端很受大众的喜爱！！！<br><img src="https://img-blog.csdnimg.cn/20200330190903552.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3l3c3lkd3Nibg==,size_16,color_FFFFFF,t_70" alt="树莓派"></p><h1 id="树莓派的特点"><a href="#树莓派的特点" class="headerlink" title="树莓派的特点"></a>树莓派的特点</h1><p>与常见的51单片机和STM32等这类的嵌入式微控制器相比，不仅可以完成相同的IO引脚控制之外，还能运行有相应的操作系统，可以完成更复杂的任务管理与调度，能够支持更上层应用的开发，为了开发者提供了更广阔的应用空间。比如开发语言的选择不仅仅只限于C语言，连接底层硬件与上层应用，可以实现物联网的云控制和云管理，也可以忽略树莓派的IO控制，使用树莓派搭建小型的网络服务器，做一些小型的测试开发和服务。</p><p>与一般的PC计算机平台相比，树莓派可以提供的IO引脚，能够直接控制其他底层硬件的功能，这是一般PC计算机做不到的，当然，树莓派体积小，成本低，照常可以完成一些PC任务与应用。</p><p>树莓派自带的摄像头拍摄夜空是有先例的，起码可以做到延时摄影。对于实时拍摄没有研究，但是仍然有必要测试。<br>树莓派自带的摄像头是500万像素，价格在26-29欧元（人民币200+左右）</p><h1 id="实时还是事后采集记录结果？"><a href="#实时还是事后采集记录结果？" class="headerlink" title="实时还是事后采集记录结果？"></a>实时还是事后采集记录结果？</h1><p>树莓派上的摄像机，是使用一个<code>raspivid</code>命令操作的。 抛开这个命令的其他参数，其<strong>输出数据有2种方式</strong>：</p><ul><li>将数据保存成文件，储存在SD卡上，以便事后读取;</li><li>将数据按照字节流的形式，直接输出到STDOUT标准输出中，可以实时获取。</li></ul><p>选择哪种方式，首先要考虑我们能否具有足够的采集数据的能力。</p><p><code>raspivid</code>命令可以调节相机模块的输出比特率。输出是以<code>H264</code>编码输出的，比特率一般默认是17Mbps，但是这个数字可以调小。 如果按照17Mbps算，就是一秒钟2.12兆字节。 我们记录数据或者获取数据的速度不能低于这个值，否则长时间录像可能造成树莓派的缓存充满，导致树莓派崩溃。</p><p>树莓派的网卡是使用了其USB总线，传送速度是100Mb/s或者12.5MB/s。 实际上后文的实验表明，目前能达到的传送速度只有<strong>3MB/s（TCP）</strong> 或者 <strong>6MB/s（UDP）</strong>。</p><p>如果使用SD卡存储，这个记录速度也是可以达到的，但是，SD卡有写入寿命，这是要考虑的。 例如，对于32GB的卡，即使我们能利用全部存储空间，以2MB/s的速度录像，也只能记录4.55小时。</p><h1 id="如何通过网络实时传送数据？"><a href="#如何通过网络实时传送数据？" class="headerlink" title="如何通过网络实时传送数据？"></a>如何通过网络实时传送数据？</h1><p><code>raspivid</code>命令的<code>-o</code>选项，就是用来指定输出文件的。 在<code>Linux</code>系统中，输出到文件并不等于写入到磁盘（这里是SD卡）。 我们仍然可能使用<code>RAMDisk</code>这种技术，让输出只是暂时存储在内存中，并稍后读取，然后删除之。 但是，树莓派的可用内存可能只有280MB，这最多只能记录差不多2分钟的视频。</p><p>如果我们有文件形式的摄像记录，那么就似乎可以使用文件传输的协议，例如<code>sftp, scp</code>等等登录到树莓派下载文件了。 然而这是不对的。这些协议在传输中使用了加密。</p><p>树莓派在向我们的电脑进行数据传送的时候，如果用这些协议，就必须先对发送的数据进行加密。 在互联网上，加密是很好的设计。但是在树莓派和电脑之间只用一根网线连接的时候，就不是了。 树莓派的运算能力是很有限的，使用加密只会让传送速度变慢，所以，不要使用加密！</p><p>我们使用最原始而简单的方法：<strong>使用netcat命令</strong>，在笔记本电脑这一端监听数据输入。 在树莓派这一端，我们让raspivid获取一定周期（比如10分钟，也许可以更长）的录像， 将结果设定为直接输出，然后利用Linux的管道机制，直接送进netcat发送。</p><h1 id="配置由树莓派和笔记本构成的网络"><a href="#配置由树莓派和笔记本构成的网络" class="headerlink" title="配置由树莓派和笔记本构成的网络"></a>配置由树莓派和笔记本构成的网络</h1><p>树莓派和笔记本电脑之间的连接，使用普通网线即可， 因为笔记本和树莓派上的网卡都能自动适应网线，设定正确的模式（正常来说要使用交叉网线）。</p><p>重要的一步是，笔记本电脑和树莓派连接后构成的网络中，需要手动为两个设备设定IP地址。 对于笔记本电脑的设定，就比较简单了。 我们将笔记本电脑和树莓派相连的网卡上，将电脑的<strong>IP地址设定为<code>xxx.xxx.x.xxx</code>，子网掩码为<code>255.255.255.0</code>，网关不要填</strong>。</p><p>配置树莓派的方法是，先将树莓派断电，然后取出所用的SD卡，用读卡器插回电脑。 在SD卡的<code>boot分区</code>中，有个<code>cmdline.txt</code>，这是树莓派开机时所用到的一些参数。</p><p>打开这个文件，会发现里面只有一行。这一行中用空格分开了很多设定参数。 我们在这一行的结尾，不添加空行，直接加上空格，然后写上：<code>ip=xxx.xxx.x.xxx</code></p><p>当然如果这一行里面已经有了ip=的参数，应该直接修改它。</p><p>这样的结果就是，树莓派开机之后，会自己选择这个IP地址作为自己的地址。 </p><h1 id="实现在笔记本上监听输入"><a href="#实现在笔记本上监听输入" class="headerlink" title="实现在笔记本上监听输入"></a>实现在笔记本上监听输入</h1><p><code>netcat命令</code>，在每收到一个文件的<code>EOF</code>（End Of File，表明文件已经到结尾），就会退出。 我们为了让接收能够连续进行，需要用脚本连续运行这个命令。 这样就会为每个新接收到的视频，在笔记本电脑这一端建立一个文件用来存储。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># -*- coding: utf-8 -*-</span><span class="token keyword">import</span> os<span class="token keyword">import</span> signal<span class="token keyword">import</span> subprocess<span class="token keyword">import</span> sys<span class="token keyword">import</span> uuid<span class="token comment" spellcheck="true"># 获取程序运行的本地目录，和用来存储接收结果的recv文件夹目录</span>BASEPATH <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>realpath<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>dirname<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>RECV <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>BASEPATH<span class="token punctuation">,</span> <span class="token string">'recv'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 如果接收目录不存在，就自动新建</span><span class="token keyword">print</span> <span class="token string">" *** Received files are put into: %s"</span> <span class="token operator">%</span> RECV<span class="token keyword">if</span> <span class="token operator">not</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>isdir<span class="token punctuation">(</span>RECV<span class="token punctuation">)</span><span class="token punctuation">:</span>    os<span class="token punctuation">.</span>system<span class="token punctuation">(</span><span class="token string">'mkdir -p %s'</span> <span class="token operator">%</span> RECV<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 下面的部分用来记录正在等待接收的文件。这个文件会以一个UUID.tmp的格式命名。</span><span class="token comment" spellcheck="true"># 在接收成功后，就会被重命名为UUID。（UUID是一个特定格式的唯一字符串，不会重复）。</span><span class="token comment" spellcheck="true"># 如果在接收过程中按下Ctrl+C，就会发送一个终止命令给程序，这样程序会退出，</span><span class="token comment" spellcheck="true"># 并删除没有接收完整的那个文件。</span>working <span class="token operator">=</span> <span class="token boolean">False</span>fullname <span class="token operator">=</span> <span class="token boolean">False</span><span class="token keyword">def</span> <span class="token function">sigint_handler</span><span class="token punctuation">(</span>signum<span class="token punctuation">,</span> frame<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">global</span> fullname<span class="token punctuation">,</span> working    <span class="token keyword">print</span> <span class="token string">"\n"</span>    <span class="token keyword">print</span> <span class="token string">" *** SIGINT detected. End the program."</span>    <span class="token keyword">if</span> working <span class="token operator">and</span> fullname <span class="token operator">!=</span> <span class="token boolean">False</span><span class="token punctuation">:</span>        <span class="token keyword">print</span> <span class="token string">" *** Unfinished recording deleted."</span>        os<span class="token punctuation">.</span>system<span class="token punctuation">(</span><span class="token string">'rm -f %s.tmp'</span> <span class="token operator">%</span> fullname<span class="token punctuation">)</span>    exit<span class="token punctuation">(</span><span class="token punctuation">)</span>signal<span class="token punctuation">.</span>signal<span class="token punctuation">(</span>signal<span class="token punctuation">.</span>SIGINT<span class="token punctuation">,</span> sigint_handler<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 使用一个死循环来不断运行netcat(nc)命令。</span>n <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    recname <span class="token operator">=</span> str<span class="token punctuation">(</span>uuid<span class="token punctuation">.</span>uuid1<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span> <span class="token string">" [%8d] Listening for file [%s]. Use Ctrl+C to stop this script."</span> <span class="token operator">%</span> <span class="token punctuation">(</span>n<span class="token punctuation">,</span> recname<span class="token punctuation">)</span>    fullname <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>RECV<span class="token punctuation">,</span> recname<span class="token punctuation">)</span>    working <span class="token operator">=</span> <span class="token boolean">True</span> <span class="token comment" spellcheck="true"># 标记接收开始</span>    <span class="token comment" spellcheck="true"># 使用 nc -lp 10401 命令接收数据，表明端口为10401。</span>    subprocess<span class="token punctuation">.</span>call<span class="token punctuation">(</span><span class="token string">'nc -lp 10401 > %s.tmp'</span> <span class="token operator">%</span> fullname<span class="token punctuation">,</span> shell<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    os<span class="token punctuation">.</span>system<span class="token punctuation">(</span><span class="token string">'mv %s.tmp %s'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>fullname<span class="token punctuation">,</span> fullname<span class="token punctuation">)</span><span class="token punctuation">)</span>    working <span class="token operator">=</span> <span class="token boolean">False</span> <span class="token comment" spellcheck="true"># 标记接收完毕</span>    n <span class="token operator">+=</span> <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上文所述的脚本，在笔记本上运行之后，就会在本地开启10401端口，等待树莓派上传送的文件。 传送的会直接写入一个由UUID（全局唯一ID）标识的文件中，可以供以后处理。</p><h1 id="在树莓派上摄像并发送摄像结果"><a href="#在树莓派上摄像并发送摄像结果" class="headerlink" title="在树莓派上摄像并发送摄像结果"></a>在树莓派上摄像并发送摄像结果</h1><p>在树莓派上命令拍摄的方法是：</p><pre class="line-numbers language-powershell"><code class="language-powershell">$ raspivid <span class="token operator">-</span>o <span class="token operator">-</span> <span class="token operator">-</span>b 16000000 <span class="token operator">-</span>t 100000 <span class="token punctuation">|</span> nc xxx<span class="token punctuation">.</span>xxx<span class="token punctuation">.</span>x<span class="token punctuation">.</span>xxx 10401<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>这条指令的意义如下</strong>：</p><ul><li>-o -，使用-o设定输出，-表示直接输出到标准输出中，不写入文件。</li><li>-b 16000000，设定输出比特率为16000000 bit/s。这大约是2兆字节每秒。</li><li>-t 100000，设定录像时间为100000毫秒，亦即100秒。</li><li>| nc xxx.xxx.x.xxx 10401，使用管道|将结果导入到nc中，nc是发送模式，目标是xxx.xxx.x.xxx计算机上的10401端口。</li></ul>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> Raspberry Pi </tag>
            
            <tag> 网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数学分析模型（一）：数据的无量纲处理方法及示例（附完整代码）</title>
      <link href="/2020/12/01/dimensionless-processing-of-data/"/>
      <url>/2020/12/01/dimensionless-processing-of-data/</url>
      
        <content type="html"><![CDATA[<p>在对实际问题建模过程中，特别是在建立指标评价体系时，常常会面临不同类型的数据处理及融合。而各个指标之间由于计量单位和数量级的不尽相同，从而使得各指标间不具有可比性。在数据分析之前，通常需要先将数据标准化，利用标准化后的数据进行分析。数据标准化处理主要包括同趋化处理和无量纲化处理两个方面。数据的同趋化处理主要解决不同性质的数据问题，对不同性质指标直接累加不能正确反应不同作用力的综合结果，须先考虑改变逆指标数据性质，使所有指标对评价体系的作用力同趋化。数据无量纲化主要解决数据的不可比性，在此处主要介绍几种数据的无量纲化的处理方式。</p><h1 id="（1）极值化方法"><a href="#（1）极值化方法" class="headerlink" title="（1）极值化方法"></a>（1）极值化方法</h1><p>可以选择如下的三种方式：<br>（A）<img src="https://img-blog.csdnimg.cn/20200501113123953.png" alt="在这里插入图片描述">即每一个变量除以该变量取值的全距，标准化后的每个变量的取值范围限于[-1,1]。<br>(B) <img src="https://img-blog.csdnimg.cn/20200501113147271.png" alt="在这里插入图片描述">即每一个变量与变量最小值之差除以该变量取值的全距，标准化后各变量的取值范围限于[0,1]。<br>(C）<img src="https://img-blog.csdnimg.cn/20200501113205125.png" alt="在这里插入图片描述"> ，即每一个变量值除以该变量取值的最大值，标准化后使变量的最大取值为1。</p><p>采用极值化方法对变量数据无量纲化是通过变量取值的最大值和最小值将原始数据转换为界于某一特定范围的数据，从而消除量纲和数量级的影响。由于极值化方法对变量无量纲化过程中仅仅对该变量的最大值和最小值这两个极端值有关，而与其他取值无关，这使得该方法在改变各变量权重时过分依赖两个极端取值。</p><h1 id="（2）标准化方法"><a href="#（2）标准化方法" class="headerlink" title="（2）标准化方法"></a>（2）标准化方法</h1><p>利用<img src="https://img-blog.csdnimg.cn/20200501113333257.png" alt="在这里插入图片描述">来计算，即每一个变量值与其平均值之差除以该变量的标准差，无量纲化后各变量的平均值为0，标准差为1，从而消除量纲和数量级的影响。虽然该方法在无量纲化过程中利用了所有的数据信息，但是该方法在无量纲化后不仅使得转换后的各变量均值相同，且标准差也相同，即无量纲化的同时还消除了各变量在变异程度上的差异。</p><h1 id="（3）均值化方法"><a href="#（3）均值化方法" class="headerlink" title="（3）均值化方法"></a>（3）均值化方法</h1><p>计算公式为：<img src="https://img-blog.csdnimg.cn/20200501113415384.png" alt="在这里插入图片描述">，该方法在消除量纲和数量级影响的同时，保留了各变量取值差异程度上的信息。<br>（4）标准差化方法<br>计算公式为：<img src="https://img-blog.csdnimg.cn/20200501113444104.png" alt="在这里插入图片描述">。该方法是标准化方法的基础上的一种变形，两者的差别仅在无量纲化后各变量的均值上，标准化方法处理后各变量的均值为0，而标准差化方法处理后各变量均值为原始变量均值与标准差的比值。</p><p>综上所述，针对不同类型的数据，可以选择相应的无量纲化方法。如下的示例就是一个典型的评价体系中无量纲化的范例。</p><h1 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h1><p>近年来我国淡水湖水质富营养化的污染日益严重，如何对湖泊水质的富营养化进行综合评价与治理是摆在我们面前的任务，下面两个表格分别为我国5个湖泊的实测数据和湖泊水质评价标准。</p><p>表1  全国五个主要湖泊评价参数的实测数据<br><img src="https://img-blog.csdnimg.cn/20200501113549269.png" alt="全国五个主要湖泊评价参数的实测数据"><br>表2  湖泊水质评价标准<br><img src="https://img-blog.csdnimg.cn/20200501113628784.png" alt="湖泊水质评价标准"></p><h2 id="要求"><a href="#要求" class="headerlink" title="要求"></a>要求</h2><p>（1）试用以上数据，分析总磷，耗氧量，透明度，总氨这4个指标对湖泊水质评价富营养化的作用。<br>（2）对这5个湖泊的水质综合评价，确定水质等级。</p><p>在进行综合评价之前，首先要对评价的指标进行分析。通常评价指标分成效益型，成本型和固定型指标。效益型指标是指那些数值越大影响力越大的统计指标（也称正向型指标）；成本型指标是指数值越小越好的指标（也称逆向型指标）；而固定型指标是指数值越接近于某个常数越好的指标（也称适度型指标）。如果每个评价指标的属性不一样，则在综合评价时就容易发生偏差，必须先对各评价指标统一属性。</p><h2 id="建模步骤"><a href="#建模步骤" class="headerlink" title="建模步骤"></a>建模步骤</h2><p>（ⅰ）建立无量纲化实测数据矩阵和评价标准矩阵，其中实测数据矩阵和等级标准矩阵如下，<br><img src="https://img-blog.csdnimg.cn/20200501113736824.png" alt="实测数据矩阵和等级标准矩阵"><br>然后建立无量纲化实测数据矩阵和无量纲化等级标准矩阵，其中<br><img src="https://img-blog.csdnimg.cn/20200501113756112.png" alt="a和b"><br>得到<br><img src="https://img-blog.csdnimg.cn/20200501114209393.png" alt="A"></p><p><img src="https://img-blog.csdnimg.cn/20200501114201749.png" alt="B"></p><p>（ⅱ）计算各评价指标的权重<br>计算矩阵B的各行向量的均值和标准差，<br><img src="https://img-blog.csdnimg.cn/20200501114144147.png" alt="均值和标准差"></p><p>然后计算变异系数<img src="https://img-blog.csdnimg.cn/20200501114223682.png" alt="变异系数"><br>最后对变异系数归一化得到各指标的权重为<br><img src="https://img-blog.csdnimg.cn/20200501114336124.png" alt="指标的权重"><br>（ⅲ）建立各湖泊水质的综合评价模型<br>通常可以利用向量之间的距离来衡量两个向量之间的接近程度，在Matlab中，有以下的函数命令来计算向量之间的距离；<br>dist(w,p): 计算中的每个行向量和中每个列向量之间的欧式距离；<br>mandist(w,p): 绝对值距离。<br>计算中各行向量到中各列向量之间的欧氏距离，<br><img src="https://img-blog.csdnimg.cn/20200501114434381.png" alt="各列向量之间的欧氏距离"><br>若<img src="https://img-blog.csdnimg.cn/20200501114446171.png" alt="在这里插入图片描述">，则第个湖泊属于第级。<br><img src="https://img-blog.csdnimg.cn/20200501114457329.png" alt="在这里插入图片描述"><br>这说明杭州西湖，武汉东湖都属于极富营养水质，青海湖属于中营养水质，而巢湖和滇池属于富营养水质。</p><p>同时也可以计算中各行向量到中各列向量之间的绝对值距离<img src="https://img-blog.csdnimg.cn/202005011145144.png" alt="在这里插入图片描述"><br>若<img src="https://img-blog.csdnimg.cn/20200501114526659.png" alt="在这里插入图片描述">，则第个湖泊属于第级。<br><img src="https://img-blog.csdnimg.cn/20200501114535650.png" alt="在这里插入图片描述"><br>其评价结果与利用欧氏距离得到的评价结果完全一样。</p><p>所以，从上面的计算可以看出，尽管欧氏距离和绝对值距离的意义完全不一样，但对湖泊水质的评价等级是一样的，这表明了方法的稳定性。</p><h1 id="程序"><a href="#程序" class="headerlink" title="程序"></a>程序</h1><pre class="line-numbers language-powershell"><code class="language-powershell">X=<span class="token punctuation">[</span>130 10<span class="token punctuation">.</span>3 0<span class="token punctuation">.</span>35 2<span class="token punctuation">.</span>76<span class="token punctuation">;</span>105 10<span class="token punctuation">.</span>7 0<span class="token punctuation">.</span>4 2<span class="token punctuation">;</span>20 1<span class="token punctuation">.</span>4 4<span class="token punctuation">.</span>5 0<span class="token punctuation">.</span>2230 6<span class="token punctuation">.</span>26 0<span class="token punctuation">.</span>25 1<span class="token punctuation">.</span>67 <span class="token punctuation">;</span>20 10<span class="token punctuation">.</span>13 0<span class="token punctuation">.</span>5 0<span class="token punctuation">.</span>23<span class="token punctuation">]</span><span class="token punctuation">;</span>A1=X<span class="token punctuation">(</span>:<span class="token punctuation">,</span>1<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token operator">/</span>130<span class="token punctuation">;</span>A2=X<span class="token punctuation">(</span>:<span class="token punctuation">,</span>2<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token operator">/</span>10<span class="token punctuation">.</span>7<span class="token punctuation">;</span>A3=0<span class="token punctuation">.</span>25<span class="token punctuation">.</span><span class="token operator">/</span>X<span class="token punctuation">(</span>:<span class="token punctuation">,</span>3<span class="token punctuation">)</span><span class="token punctuation">;</span>A4=X<span class="token punctuation">(</span>:<span class="token punctuation">,</span>4<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token operator">/</span>2<span class="token punctuation">.</span>76<span class="token punctuation">;</span>A=<span class="token namespace">[A1 A2 A3 A4]</span><span class="token punctuation">;</span>Y=<span class="token punctuation">[</span>1 4 23 100 660<span class="token punctuation">;</span>0<span class="token punctuation">.</span>09 0<span class="token punctuation">.</span>36 1<span class="token punctuation">.</span>8 7<span class="token punctuation">.</span>1 27<span class="token punctuation">.</span>1<span class="token punctuation">;</span>37 12 2<span class="token punctuation">.</span>4 0<span class="token punctuation">.</span>55 0<span class="token punctuation">.</span>17<span class="token punctuation">;</span>0<span class="token punctuation">.</span>02 0<span class="token punctuation">.</span>06 0<span class="token punctuation">.</span>31 1<span class="token punctuation">.</span>2 4<span class="token punctuation">.</span>6<span class="token punctuation">]</span><span class="token punctuation">;</span>B1=Y<span class="token punctuation">(</span>1<span class="token punctuation">,</span>:<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token operator">/</span>660<span class="token punctuation">;</span>B2=Y<span class="token punctuation">(</span>2<span class="token punctuation">,</span>:<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token operator">/</span>27<span class="token punctuation">.</span>1<span class="token punctuation">;</span>B3=0<span class="token punctuation">.</span>17<span class="token punctuation">.</span><span class="token operator">/</span>Y<span class="token punctuation">(</span>3<span class="token punctuation">,</span>:<span class="token punctuation">)</span><span class="token punctuation">;</span>B4=Y<span class="token punctuation">(</span>4<span class="token punctuation">,</span>:<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token operator">/</span>4<span class="token punctuation">.</span>6<span class="token punctuation">;</span>B=<span class="token namespace">[B1;B2;B3;B4]</span><span class="token punctuation">;</span><span class="token operator">%</span> dist是一个欧式距离加权函数，给一个输入使用权值，去获得加权的输入<span class="token operator">%</span> dist<span class="token punctuation">(</span>W<span class="token punctuation">,</span>P<span class="token punctuation">)</span>中：W——S×R的权值矩阵；P——R×Q的矩阵，表示Q个输入（列）向量<span class="token operator">%</span> dist<span class="token punctuation">(</span>w<span class="token punctuation">,</span>p<span class="token punctuation">)</span>: 计算中的每个行向量和中每个列向量之间的欧式距离；jd=dist<span class="token punctuation">(</span>A<span class="token punctuation">,</span>B<span class="token punctuation">)</span><span class="token punctuation">;</span>jd<span class="token operator">%</span> mandist<span class="token punctuation">(</span>w<span class="token punctuation">,</span>p<span class="token punctuation">)</span>: 绝对值距离mjd=mandist<span class="token punctuation">(</span>A<span class="token punctuation">,</span>B<span class="token punctuation">)</span><span class="token punctuation">;</span>mjd<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h1><p><img src="https://img-blog.csdnimg.cn/20200501161822708.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3l3c3lkd3Nibg==,size_16,color_FFFFFF,t_70" alt="运行结果"></p><h1 id="备注"><a href="#备注" class="headerlink" title="备注"></a>备注</h1><p><strong>各位老铁养成习惯，看完点个赞呗，随便也来个关注！！！</strong> </p><p><strong>各位老铁养成习惯，看完点个赞呗，随便也来个关注！！！</strong></p><p><strong>各位老铁养成习惯，看完点个赞呗，随便也来个关注！！！</strong> </p>]]></content>
      
      
      <categories>
          
          <category> 数学建模 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数学分析模型 </tag>
            
            <tag> matlab </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于混沌Logistic加密算法的图片加密与还原</title>
      <link href="/2020/12/01/ji-yu-hun-dun-logistic-jia-mi-suan-fa-de-tu-pian-jia-mi-yu-huan-yuan/"/>
      <url>/2020/12/01/ji-yu-hun-dun-logistic-jia-mi-suan-fa-de-tu-pian-jia-mi-yu-huan-yuan/</url>
      
        <content type="html"><![CDATA[<h1 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h1><blockquote><p>一种基于混沌Logistic加密算法的图片加密与还原的方法，并利用Lena图和Baboon图来验证这种加密算法的加密效果。为了能够体现该算法在图片信息加密的效果，本文还采用了普通行列置乱加密算法和像素点的RGB的值的缩放算法这两种算法对相同的图片的图片进行处理，利用matlab通过显示加密过后的图片以及直方图分析可以很直观的发现混沌Logistic加密算法对图片信息加密的效果更好，并且很好地隐藏了原始图像的统计特性，能够有效地抵御基于图像像素值的统计攻击，达到了图像加密的效果。</p></blockquote><h1 id="混沌Logistic映射的理论"><a href="#混沌Logistic映射的理论" class="headerlink" title="混沌Logistic映射的理论"></a>混沌Logistic映射的理论</h1><h2 id="混沌的基本概念"><a href="#混沌的基本概念" class="headerlink" title="混沌的基本概念"></a>混沌的基本概念</h2><p>1975年，美国数学家约克和美籍华人李天岩发表了《周期3意味着混沌》的文章，首次提出了“混沌”—词，阐述了混沌的数学定义，对混沌学的发展具有重大意义。自此以后，混沌研究开始蓬勃发展。<br>混沌是指在确定性动力学系统中，由于对初值敏感而表现出的类似随机的、不可预测的运动。混沌是确定的非线性系统中出现的内在随机性现象，其变化并非随机确貌似随机。</p><h2 id="Logistic映射方程"><a href="#Logistic映射方程" class="headerlink" title="Logistic映射方程"></a>Logistic映射方程</h2><p>Logistic映射是一个典型的非线性的迭代方程，如式所示：<br>                               <img src="https://img-blog.csdnimg.cn/20200322115202600.png" alt="在这里插入图片描述"><br>称为Logistic映射的控制参数，对任意的k有<img src="https://img-blog.csdnimg.cn/20200322115314240.png" alt="在这里插入图片描述">，其中k为迭代时间步。==Logistic映射的动态行为与控制参数u密切相关==，对于不同的u值系统将呈现不同的特性（即当k趋于无穷大，xk的变化情况）。其中==Logistic映射有两个主要的参数，一个是初值x0，一个是系统参数μ==，研究表明，==当 0&lt;μ&lt;=3.5699456时，Logistic呈现出周期性；而当映射方程满足0&lt;x0&lt;1和3.5699456&lt;μ&lt;=4这两个条件时，Logistic映射处于混沌状态==，即一种无序的、不可预测的、混乱的、摸不到头、摸不到尾的状态。对给定的初始值x0，生成的序列是非周期性、非收敛以及对初始条件敏感的。</p><blockquote><p>有界性<br>混沌是有界的，它的运动轨线始终局限于一个确定的区域，这个区域称为混沌吸引域。由图 所示，无论控制参数μ怎么变，迭代值xn始终在(0,1)之间。</p></blockquote><p><img src="https://img-blog.csdnimg.cn/20200322120312766.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3l3c3lkd3Nibg==,size_16,color_FFFFFF,t_70" alt="**不同控制参数μ下的Logistic分岔图**"></p><h1 id="混沌Logistic映射与其他加密算法介绍"><a href="#混沌Logistic映射与其他加密算法介绍" class="headerlink" title="混沌Logistic映射与其他加密算法介绍"></a>混沌Logistic映射与其他加密算法介绍</h1><h2 id="普通行列置乱加密算法"><a href="#普通行列置乱加密算法" class="headerlink" title="普通行列置乱加密算法"></a>普通行列置乱加密算法</h2><h3 id="普通置乱加密算法的流程"><a href="#普通置乱加密算法的流程" class="headerlink" title="普通置乱加密算法的流程"></a>普通置乱加密算法的流程</h3><p>将读入的水印图片，先获取图片的大小，得到原始图片矩阵，首先随机打乱各行，输出打乱后的矩阵，再将这个矩阵随机打乱各列，最后图像成功加密，显示加密图像。算法流程框图如图：</p><p><img src="https://img-blog.csdnimg.cn/20200322120508960.png" alt="在这里插入图片描述"></p><h3 id="算法分析"><a href="#算法分析" class="headerlink" title="算法分析"></a>算法分析</h3><pre><code>s = size(handles.img);r = randsample(s(1), s(1)); RGBS = handles.img(r, :, :);c = randsample(s(2), s(2)); RGBSS = RGBS(:, c, :);axes(handles.axes2);        imshow(RGBSS); title(&#39;普通置乱加密图像&#39;);figure(2);hist_im=histogram(RGBSS); %加密后直方图title(&#39;普通置乱加密直方图&#39;);</code></pre><h2 id="像素点的RGB值缩放加密"><a href="#像素点的RGB值缩放加密" class="headerlink" title="像素点的RGB值缩放加密"></a>像素点的RGB值缩放加密</h2><h3 id="像素点的RGB值缩放加密算法的流程"><a href="#像素点的RGB值缩放加密算法的流程" class="headerlink" title="像素点的RGB值缩放加密算法的流程"></a>像素点的RGB值缩放加密算法的流程</h3><p>首先读入原始图片，通过size获取水印图片的大小矩阵，接着获取图片各R、G、B的值，然后将获取到的RGB值分别扩大20倍并将值赋给r，最后再将r与将水印图片转换成double类型的矩阵进行点乘运算实现图像的成功加密。算法流程框图如图：</p><p><img src="https://img-blog.csdnimg.cn/20200322120755105.png" alt="在这里插入图片描述"></p><h3 id="算法分析-1"><a href="#算法分析-1" class="headerlink" title="算法分析"></a>算法分析</h3><pre><code>s = size(handles.img);r = rand(s(1), s(2), s(3)) * 20;RGBD = im2double(handles.img);RGB_jiami = RGBD .* r;axes(handles.axes2);      imshow(RGB_jiami); title(&#39;像素点的RGB值缩放加密图像&#39;);figure(3);hist_im=histogram(RGB_jiami); title(&#39;像素点的RGB值缩放加密直方图&#39;);</code></pre><h2 id="混沌Logistic映射加密算法"><a href="#混沌Logistic映射加密算法" class="headerlink" title="混沌Logistic映射加密算法"></a>混沌Logistic映射加密算法</h2><h3 id="混沌Logistic映射加密算法模型"><a href="#混沌Logistic映射加密算法模型" class="headerlink" title="混沌Logistic映射加密算法模型"></a>混沌Logistic映射加密算法模型</h3><p>读入待处理的原始图片，通过加密密钥进入混沌序列，通过混沌系统设计加密算法，实现加密目的；再输入解密密钥，把加密过程逆向运算即可得到解密图像。系统参数u和初值x0设置成密钥。混沌Logistic映射加密算法模型如图：</p><p><img src="https://img-blog.csdnimg.cn/20200322121024286.png" alt="在这里插入图片描述"></p><p>当迭代n次后，我们就得到了x1、x2、…，xn这n个值，这就是一个混沌序列，是一维的，称作序列A，也就是我们想要得到的序列，在MATLAB中，可以看出xi（i=1,2,…,n）的取值是在(0,1)之间的，就像图像灰度值是在(0,255)之间一样。那么我们把这个一维序列归一化到(0,255)之间得到序列B。异或过程如图：</p><p><img src="https://img-blog.csdnimg.cn/20200322121130568.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3l3c3lkd3Nibg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="算法分析-2"><a href="#算法分析-2" class="headerlink" title="算法分析"></a>算法分析</h3><pre><code>u=4;   for i=1:500     x=u*x*(1-x); end fprintf(&#39;x(k+1)=%d\n&#39;,x); A=zeros(1,M*N); A(1)=x;   for i=1:M*N-1     A(i+1)=u*A(i)*(1-A(i)); endB=uint8(255*A); %Imgn=reshape(B,M,N);   C=zeros(M,N); for x=1:M     for y=1:N         C(x,y)=handles.img(x,y);     endendC; D=uint8(C); Rod=bitxor(D,Imgn); Rod; rod=reshape(Rod,M,N/3,3); </code></pre><h1 id="验证与性能分析"><a href="#验证与性能分析" class="headerlink" title="验证与性能分析"></a>验证与性能分析</h1><h2 id="Matlab-GUI操作界面"><a href="#Matlab-GUI操作界面" class="headerlink" title="Matlab GUI操作界面"></a>Matlab GUI操作界面</h2><p>使用的是<strong>MATLAB GUI可视化仿真平台</strong>。它是采用图形方式显示的计算机操作用户界面，是MATLAB用户可视化交互式的工具，运用GUI生成的操作界面用户可以不用浏览繁冗的代码而进行操作。如图是设计的<strong>GUI操作界面</strong><br><img src="https://img-blog.csdnimg.cn/20200322121557542.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3l3c3lkd3Nibg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong><em>看到这个界面是不是很不错，对的。。。你没看错MATLAB GUI确实是这么厉害。。。。。。。</em></strong></p><h2 id="普通行列置乱加密实现"><a href="#普通行列置乱加密实现" class="headerlink" title="普通行列置乱加密实现"></a>普通行列置乱加密实现</h2><p>Lena原图像、加密图像、解密图像<br><img src="https://img-blog.csdnimg.cn/20200322121749624.png" alt="在这里插入图片描述"><br>Baboon原图像、加密图像、解密图像<br><img src="https://img-blog.csdnimg.cn/20200322121818930.png" alt="在这里插入图片描述"></p><h2 id="像素点的RGB值的缩放加密实现"><a href="#像素点的RGB值的缩放加密实现" class="headerlink" title="像素点的RGB值的缩放加密实现"></a>像素点的RGB值的缩放加密实现</h2><p>Lena原图像、加密图像、解密图像<br><img src="https://img-blog.csdnimg.cn/20200322121940411.png" alt="在这里插入图片描述"><br>Baboon原图像、加密图像、解密图像<br><img src="https://img-blog.csdnimg.cn/2020032212200941.png" alt="在这里插入图片描述"></p><h2 id="混沌Logistic映射加密实现"><a href="#混沌Logistic映射加密实现" class="headerlink" title="混沌Logistic映射加密实现"></a>混沌Logistic映射加密实现</h2><p>Lena原图像、加密图像、解密图像<br><img src="https://img-blog.csdnimg.cn/20200322122101398.png" alt="在这里插入图片描述"><br>Baboon原图像、加密图像、解密图像<br><img src="https://img-blog.csdnimg.cn/2020032212213175.png" alt="在这里插入图片描述"></p><h2 id="直方图性能分析"><a href="#直方图性能分析" class="headerlink" title="直方图性能分析"></a>直方图性能分析</h2><blockquote><p>这里就只对lena图进行直方图分析，Baboon图大致和lena图一样。</p></blockquote><p>Lena图的普通置乱与混沌Logistic加密的直方图<br><img src="https://img-blog.csdnimg.cn/20200322122315134.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3l3c3lkd3Nibg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>普通行列置乱图像的直方图与原始图像的直方图相同，且像素点的分布都不均匀，而混沌Logistic加密图像的直方图的像素点分布相对均匀，很好地隐藏了原始图像的统计特性，达到了图像加密的效果。</p><p>Lena图的像素点的RGB缩放与混沌Logistic加密的直方图<br><img src="https://img-blog.csdnimg.cn/20200322125400671.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3l3c3lkd3Nibg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>由直方图可知：像素点的RGB缩放图像的直方图与原始图像的直方图不相同且像素点的分布都不均匀，而混沌Logistic加密图像的直方图的像素点分布相对均匀，很好地隐藏了原始图像的统计特性。</p><p>完整代码以上传至我的github：<a href="https://github.com/gain-wyj/-Logistic-" target="_blank" rel="noopener">完整代码</a></p><blockquote><p><strong><em>你的三连击是我的荣幸！！！！！</em></strong></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 数字图像处理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> matlab </tag>
            
            <tag> Logistic加密 </tag>
            
            <tag> 数字图像处理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>十大经典排序算法整理汇总（附代码）</title>
      <link href="/2020/02/16/sort-algorithms/"/>
      <url>/2020/02/16/sort-algorithms/</url>
      
        <content type="html"><![CDATA[<blockquote><p>关注公众号【做一个柔情的程序猿】，每日算法干货马上就来！</p></blockquote><p><img src="/medias/contact.jpg" alt></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本文整理并总结了十大经典的排序算法（冒泡排序、选择排序、插入排序、快速排序、归并排序、希尔排序、计数排序、基数排序、桶排序、堆排序）的时间复杂度、空间复杂度等性质。</p><p><strong>本文并不会详细讲解每种排序算法的原理</strong>，网上有很多很好的教程，大家可以自己去搜了看。</p><p>最后我还亲自手写了十种排序算法的 c++ 代码，大家可以用来通过 <a href="https://leetcode-cn.com/problems/sort-an-array/" title="LeetCode 912. 排序数组" target="_blank" rel="noopener">LeetCode 912. 排序数组</a> 这道题。</p><h2 id="性质汇总"><a href="#性质汇总" class="headerlink" title="性质汇总"></a>性质汇总</h2><blockquote><p>如果发现表中有错误，请留言告知。</p></blockquote><table><thead><tr><th>算法</th><th>最好</th><th>最坏</th><th>平均</th><th>空间</th><th align="center">稳定性</th><th align="center">是否基于比较</th></tr></thead><tbody><tr><td>冒泡排序</td><td>$O(n)$</td><td>$O(n^2)$</td><td>$O(n^2)$</td><td>$O(1)$</td><td align="center">$\checkmark$</td><td align="center">$\checkmark$</td></tr><tr><td>选择排序</td><td>$O(n^2)$</td><td>$O(n^2)$</td><td>$O(n^2)$</td><td>$O(1)$</td><td align="center">$\times$</td><td align="center">$\checkmark$</td></tr><tr><td>插入排序</td><td>$O(n)$</td><td>$O(n^2)$</td><td>$O(n^2)$</td><td>$O(1)$</td><td align="center">$\checkmark$</td><td align="center">$\checkmark$</td></tr><tr><td>快速排序</td><td>$O(n\log n)$</td><td>$O(n^2)$</td><td>$O(n\log n)$</td><td>$O(\log n)$~$O(n)$</td><td align="center">$\times$</td><td align="center">$\checkmark$</td></tr><tr><td>归并排序</td><td>$O(n\log n)$</td><td>$O(n\log n)$</td><td>$O(n\log n)$</td><td>$O(n)$</td><td align="center">$\checkmark$</td><td align="center">$\checkmark$</td></tr><tr><td>希尔排序</td><td>$O(n^{1.3})$</td><td>$O(n^2)$</td><td>$O(n\log n)$~$O(n^2)$</td><td>$O(1)$</td><td align="center">$\times$</td><td align="center">$\checkmark$</td></tr><tr><td>计数排序</td><td>$O(n+k)$</td><td>$O(n+k)$</td><td>$O(n+k)$</td><td>$O(n+k)$</td><td align="center">$\checkmark$</td><td align="center">$\times$</td></tr><tr><td>基数排序</td><td>$O(nk)$</td><td>$O(nk)$</td><td>$O(nk)$</td><td>$O(n+k)$</td><td align="center">$\checkmark$</td><td align="center">$\times$</td></tr><tr><td>桶排序</td><td>$O(n)$</td><td>$O(n)$</td><td>$O(n)$</td><td>$O(n+m)$</td><td align="center">$\checkmark$</td><td align="center">$\times$</td></tr><tr><td>堆排序</td><td>$O(n\log n)$</td><td>$O(n\log n)$</td><td>$O(n\log n)$</td><td>$O(1)$</td><td align="center">$\times$</td><td align="center">$\checkmark$</td></tr></tbody></table><blockquote><p>如果表格显示有问题的话，还可以直接看下面的汇总图：</p></blockquote><p><img src="1.png" alt="十大经典排序算法性质汇总"></p><h3 id="维基百科"><a href="#维基百科" class="headerlink" title="维基百科"></a>维基百科</h3><p>我觉得还是英文维基百科讲的比较详细、严谨。如果大家看的比较累的话，可以自己百度搜索相应的教程。</p><p><strong>冒泡排序</strong><br><a href="https://en.wikipedia.org/wiki/Bubble_sort" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Bubble_sort</a></p><p><strong>选择排序</strong><br><a href="https://en.wikipedia.org/wiki/Selection_sort" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Selection_sort</a></p><p><strong>插入排序</strong><br><a href="https://en.wikipedia.org/wiki/Insertion_sort" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Insertion_sort</a></p><p><strong>快速排序</strong><br><a href="https://en.wikipedia.org/wiki/Quicksort" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Quicksort</a></p><p><strong>归并排序</strong><br><a href="https://en.wikipedia.org/wiki/Merge_sort" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Merge_sort</a></p><p><strong>希尔排序</strong><br><a href="https://en.wikipedia.org/wiki/Shellsort" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Shellsort</a></p><p><strong>计数排序</strong><br><a href="https://en.wikipedia.org/wiki/Counting_sort" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Counting_sort</a></p><p><strong>基数排序</strong><br><a href="https://en.wikipedia.org/wiki/Radix_sort" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Radix_sort</a></p><p><strong>桶排序</strong><br><a href="https://en.wikipedia.org/wiki/Bucket_sort" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Bucket_sort</a></p><p><strong>堆排序</strong><br><a href="https://en.wikipedia.org/wiki/Heapsort" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Heapsort</a></p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><p>所有的排序算法接口都是相同的，也就是 <code>vector&lt;int&gt; xxxSort(vector&lt;int&gt;&amp; nums)</code> 。只需要你传入一个 <code>vector&lt;int&gt;</code> 类型的数组，就能返回排序后的结果。</p><p>运行下来可以发现，桶排序速度是比较快的。而冒泡排序、选择排序和插入排序因为时间复杂度太高无法通过本题，基数排序因为无法处理负数也不能通过本题。</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">sortArray</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">quickSort</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 冒泡排序（超时）</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">bubbleSort</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> n<span class="token number">-2</span><span class="token punctuation">;</span> j <span class="token operator">>=</span> i<span class="token punctuation">;</span> <span class="token operator">--</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> nums<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token function">swap</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> nums<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 选择排序（超时）</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">selectSort</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> idx <span class="token operator">=</span> i<span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> nums<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    idx <span class="token operator">=</span> j<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token function">swap</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> nums<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 插入排序（超时）</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">insertSort</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token punctuation">;</span> j <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> nums<span class="token punctuation">[</span>j<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token operator">--</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">swap</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>j<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> nums<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 快速排序（24 ms）</span>    <span class="token keyword">void</span> <span class="token function">qSort</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>l <span class="token operator">>=</span> r<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> m <span class="token operator">=</span> l<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> l<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> r<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> nums<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">swap</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>m<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token function">swap</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">qSort</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> l<span class="token punctuation">,</span> m<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">qSort</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> m<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">quickSort</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">qSort</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> n<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> nums<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 归并排序（192 ms）</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">mSort</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>l <span class="token operator">>=</span> r<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">{</span>nums<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> m <span class="token operator">=</span> l<span class="token operator">+</span><span class="token punctuation">(</span>r<span class="token operator">-</span>l<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> lnums <span class="token operator">=</span> <span class="token function">mSort</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> l<span class="token punctuation">,</span> m<span class="token punctuation">)</span><span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> rnums <span class="token operator">=</span> <span class="token function">mSort</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> m<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> res<span class="token punctuation">;</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> m<span class="token operator">-</span>l <span class="token operator">&amp;&amp;</span> j <span class="token operator">&lt;=</span> r<span class="token operator">-</span>m<span class="token number">-1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>lnums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> rnums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>lnums<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>rnums<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> m<span class="token operator">-</span>l<span class="token punctuation">)</span> <span class="token punctuation">{</span>            res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>lnums<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;=</span> r<span class="token operator">-</span>m<span class="token number">-1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>rnums<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">mergeSort</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        nums <span class="token operator">=</span> <span class="token function">mSort</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> n<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> nums<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 归并排序 + 非递归（80 ms）</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">mergeSortNR</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> len <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> len <span class="token operator">&lt;&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> l <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> l <span class="token operator">&lt;</span> n<span class="token operator">-</span>len<span class="token punctuation">;</span> l <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">2</span><span class="token operator">*</span>len<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">int</span> m <span class="token operator">=</span> l<span class="token operator">+</span>len<span class="token number">-1</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> r <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>n<span class="token number">-1</span><span class="token punctuation">,</span> l<span class="token operator">+</span><span class="token number">2</span><span class="token operator">*</span>len<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> res<span class="token punctuation">;</span>                <span class="token keyword">int</span> i <span class="token operator">=</span> l<span class="token punctuation">,</span> j <span class="token operator">=</span> m<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> m <span class="token operator">&amp;&amp;</span> j <span class="token operator">&lt;=</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                        res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> m<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;=</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> l<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> r<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> res<span class="token punctuation">[</span>i<span class="token operator">-</span>l<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> nums<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 希尔排序（40 ms）</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">shellSort</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> gap <span class="token operator">=</span> n<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span> gap <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span> gap <span class="token operator">/</span><span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> gap<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token punctuation">;</span> j<span class="token operator">-</span>gap <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>j<span class="token operator">-</span>gap<span class="token punctuation">]</span> <span class="token operator">></span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span> j <span class="token operator">-</span><span class="token operator">=</span> gap<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token function">swap</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>j<span class="token operator">-</span>gap<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> nums<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 计数排序（32 ms）</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">countSort</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>n<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> minv <span class="token operator">=</span> <span class="token operator">*</span><span class="token function">min_element</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> nums<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> maxv <span class="token operator">=</span> <span class="token operator">*</span><span class="token function">max_element</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> nums<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> m <span class="token operator">=</span> maxv<span class="token operator">-</span>minv<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">count</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            count<span class="token punctuation">[</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span>minv<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> res<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> count<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>                res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>i<span class="token operator">+</span>minv<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 基数排序（不适用于负数）</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">radixSort</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> maxv <span class="token operator">=</span> <span class="token operator">*</span><span class="token function">max_element</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> nums<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> maxd <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>maxv <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            maxv <span class="token operator">/</span><span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>            maxd<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">rank</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> base <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>maxd <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            count<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>                count<span class="token punctuation">[</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">/</span>base<span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>                count<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> count<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> n<span class="token number">-1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token operator">--</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>                rank<span class="token punctuation">[</span><span class="token operator">--</span>count<span class="token punctuation">[</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">/</span>base<span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>                nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> rank<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            maxd<span class="token operator">--</span><span class="token punctuation">;</span>            base <span class="token operator">*</span><span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> nums<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 桶排序 (20 ms)</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">bucketSort</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> maxv <span class="token operator">=</span> <span class="token operator">*</span><span class="token function">max_element</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> nums<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> minv <span class="token operator">=</span> <span class="token operator">*</span><span class="token function">min_element</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> nums<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> bs <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> m <span class="token operator">=</span> <span class="token punctuation">(</span>maxv<span class="token operator">-</span>minv<span class="token punctuation">)</span><span class="token operator">/</span>bs<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token operator">></span> <span class="token function">bucket</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            bucket<span class="token punctuation">[</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span>minv<span class="token punctuation">)</span><span class="token operator">/</span>bs<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> idx <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> sz <span class="token operator">=</span> bucket<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            bucket<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">quickSort</span><span class="token punctuation">(</span>bucket<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> sz<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>                nums<span class="token punctuation">[</span>idx<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> bucket<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> nums<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 堆排序（32 ms）</span>    <span class="token keyword">void</span> <span class="token function">adjust</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> p<span class="token punctuation">,</span> <span class="token keyword">int</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">*</span>p<span class="token operator">+</span><span class="token number">1</span> <span class="token operator">&lt;</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> c1 <span class="token operator">=</span> <span class="token number">2</span><span class="token operator">*</span>p<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> c2 <span class="token operator">=</span> <span class="token number">2</span><span class="token operator">*</span>p<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token punctuation">(</span>c2<span class="token operator">&lt;</span>s <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>c2<span class="token punctuation">]</span><span class="token operator">></span>nums<span class="token punctuation">[</span>c1<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">?</span> c2 <span class="token operator">:</span> c1<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>c<span class="token punctuation">]</span> <span class="token operator">></span> nums<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token function">swap</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token keyword">break</span><span class="token punctuation">;</span>            p <span class="token operator">=</span> c<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">heapSort</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> n<span class="token operator">/</span><span class="token number">2</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token operator">--</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">adjust</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> i<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> n<span class="token number">-1</span><span class="token punctuation">;</span> i <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token operator">--</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">swap</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">adjust</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> nums<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 编程算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
