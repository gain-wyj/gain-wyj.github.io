<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>国粹——中国象棋震撼来袭，python的赶紧上车！</title>
      <link href="/2020/12/13/chinese-chess/"/>
      <url>/2020/12/13/chinese-chess/</url>
      
        <content type="html"><![CDATA[<blockquote><p><strong>阅读博客前，先点赞，养成习惯，顺便来个关注，这对我是最大的鼓励！！！</strong></p></blockquote><p>中国象棋相必大家都玩过，突发奇想，想着怎么用python把中国国粹的中国象棋做出来呢？？？？？？</p><p>首先老样子看看用python做出来的效果：<br><img src="https://img-blog.csdnimg.cn/20200712205642693.gif#pic_center" alt></p><h1 id="第一步：导入资源包"><a href="#第一步：导入资源包" class="headerlink" title="第一步：导入资源包"></a>第一步：导入资源包</h1><p>这次利用到的还是<code>海龟turtle</code></p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> turtle<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="第二步：初始化"><a href="#第二步：初始化" class="headerlink" title="第二步：初始化"></a>第二步：初始化</h1><p>初始化过程中首先获得海龟的钢笔，接着设置窗口的大小、标题和背景。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 初始化</span>pen <span class="token operator">=</span> turtle<span class="token punctuation">.</span>Pen<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 获取海龟的画笔</span>turtle<span class="token punctuation">.</span>setup<span class="token punctuation">(</span><span class="token number">714</span><span class="token punctuation">,</span><span class="token number">800</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 设置窗口的大小</span>turtle<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">"中国象棋"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 设置窗口的标题</span>turtle<span class="token punctuation">.</span>bgcolor<span class="token punctuation">(</span><span class="token string">"#F4C79E"</span><span class="token punctuation">)</span># 设置窗口的背景pen<span class="token punctuation">.</span>hideturtle<span class="token punctuation">(</span><span class="token punctuation">)</span>turtle<span class="token punctuation">.</span>tracer<span class="token punctuation">(</span><span class="token boolean">False</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="第三步：定义棋子名称与坐标"><a href="#第三步：定义棋子名称与坐标" class="headerlink" title="第三步：定义棋子名称与坐标"></a>第三步：定义棋子名称与坐标</h1><p>中国象棋中由車、馬、相（象）、士（仕）、炮、卒、将、帥（帅）组成，各个棋子有相应的坐标。这个可供参考，如果有问题可以自行设置相应的坐标。</p><pre class="line-numbers language-python"><code class="language-python">array <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token comment" spellcheck="true"># A方棋子</span>    <span class="token punctuation">{</span>        <span class="token string">"text"</span><span class="token punctuation">:</span> <span class="token string">"車"</span><span class="token punctuation">,</span>        <span class="token string">"role"</span><span class="token punctuation">:</span> <span class="token string">"A"</span><span class="token punctuation">,</span>        <span class="token string">"pix"</span><span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">330</span><span class="token punctuation">,</span> <span class="token number">369</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>        <span class="token string">"text"</span><span class="token punctuation">:</span> <span class="token string">"馬"</span><span class="token punctuation">,</span>        <span class="token string">"role"</span><span class="token punctuation">:</span> <span class="token string">"A"</span><span class="token punctuation">,</span>        <span class="token string">"pix"</span><span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">247.0</span><span class="token punctuation">,</span> <span class="token number">369.0</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>        <span class="token string">"text"</span><span class="token punctuation">:</span> <span class="token string">"象"</span><span class="token punctuation">,</span>        <span class="token string">"role"</span><span class="token punctuation">:</span> <span class="token string">"A"</span><span class="token punctuation">,</span>        <span class="token string">"pix"</span><span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">166.0</span><span class="token punctuation">,</span> <span class="token number">369.0</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>        <span class="token string">"text"</span><span class="token punctuation">:</span> <span class="token string">"士"</span><span class="token punctuation">,</span>        <span class="token string">"role"</span><span class="token punctuation">:</span> <span class="token string">"A"</span><span class="token punctuation">,</span>        <span class="token string">"pix"</span><span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">86.0</span><span class="token punctuation">,</span> <span class="token number">368.0</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>        <span class="token string">"text"</span><span class="token punctuation">:</span> <span class="token string">"将"</span><span class="token punctuation">,</span>        <span class="token string">"role"</span><span class="token punctuation">:</span> <span class="token string">"A"</span><span class="token punctuation">,</span>        <span class="token string">"pix"</span><span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">5.0</span><span class="token punctuation">,</span> <span class="token number">369.0</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>        <span class="token string">"text"</span><span class="token punctuation">:</span> <span class="token string">"士"</span><span class="token punctuation">,</span>        <span class="token string">"role"</span><span class="token punctuation">:</span> <span class="token string">"A"</span><span class="token punctuation">,</span>        <span class="token string">"pix"</span><span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token number">79.0</span><span class="token punctuation">,</span> <span class="token number">368.0</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>        <span class="token string">"text"</span><span class="token punctuation">:</span> <span class="token string">"象"</span><span class="token punctuation">,</span>        <span class="token string">"role"</span><span class="token punctuation">:</span> <span class="token string">"A"</span><span class="token punctuation">,</span>        <span class="token string">"pix"</span><span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token number">159.0</span><span class="token punctuation">,</span> <span class="token number">368.0</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>        <span class="token string">"text"</span><span class="token punctuation">:</span> <span class="token string">"馬"</span><span class="token punctuation">,</span>        <span class="token string">"role"</span><span class="token punctuation">:</span> <span class="token string">"A"</span><span class="token punctuation">,</span>        <span class="token string">"pix"</span><span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token number">239.0</span><span class="token punctuation">,</span> <span class="token number">367.0</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>        <span class="token string">"text"</span><span class="token punctuation">:</span> <span class="token string">"車"</span><span class="token punctuation">,</span>        <span class="token string">"role"</span><span class="token punctuation">:</span> <span class="token string">"A"</span><span class="token punctuation">,</span>        <span class="token string">"pix"</span><span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token number">318.0</span><span class="token punctuation">,</span> <span class="token number">369.0</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>        <span class="token string">"text"</span><span class="token punctuation">:</span> <span class="token string">"卒"</span><span class="token punctuation">,</span>        <span class="token string">"role"</span><span class="token punctuation">:</span> <span class="token string">"A"</span><span class="token punctuation">,</span>        <span class="token string">"pix"</span><span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">329.0</span><span class="token punctuation">,</span> <span class="token number">126.0</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>        <span class="token string">"text"</span><span class="token punctuation">:</span> <span class="token string">"卒"</span><span class="token punctuation">,</span>        <span class="token string">"role"</span><span class="token punctuation">:</span> <span class="token string">"A"</span><span class="token punctuation">,</span>        <span class="token string">"pix"</span><span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">167.0</span><span class="token punctuation">,</span> <span class="token number">126.0</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>        <span class="token string">"text"</span><span class="token punctuation">:</span> <span class="token string">"卒"</span><span class="token punctuation">,</span>        <span class="token string">"role"</span><span class="token punctuation">:</span> <span class="token string">"A"</span><span class="token punctuation">,</span>        <span class="token string">"pix"</span><span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">6.0</span><span class="token punctuation">,</span> <span class="token number">126.0</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>        <span class="token string">"text"</span><span class="token punctuation">:</span> <span class="token string">"卒"</span><span class="token punctuation">,</span>        <span class="token string">"role"</span><span class="token punctuation">:</span> <span class="token string">"A"</span><span class="token punctuation">,</span>        <span class="token string">"pix"</span><span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token number">156.0</span><span class="token punctuation">,</span> <span class="token number">126.0</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>        <span class="token string">"text"</span><span class="token punctuation">:</span> <span class="token string">"卒"</span><span class="token punctuation">,</span>        <span class="token string">"role"</span><span class="token punctuation">:</span> <span class="token string">"A"</span><span class="token punctuation">,</span>        <span class="token string">"pix"</span><span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token number">319.0</span><span class="token punctuation">,</span> <span class="token number">126.0</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>        <span class="token string">"text"</span><span class="token punctuation">:</span> <span class="token string">"炮"</span><span class="token punctuation">,</span>        <span class="token string">"role"</span><span class="token punctuation">:</span> <span class="token string">"A"</span><span class="token punctuation">,</span>        <span class="token string">"pix"</span><span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">248.0</span><span class="token punctuation">,</span> <span class="token number">209.0</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>        <span class="token string">"text"</span><span class="token punctuation">:</span> <span class="token string">"炮"</span><span class="token punctuation">,</span>        <span class="token string">"role"</span><span class="token punctuation">:</span> <span class="token string">"A"</span><span class="token punctuation">,</span>        <span class="token string">"pix"</span><span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token number">239.0</span><span class="token punctuation">,</span> <span class="token number">208.0</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true"># B方棋子</span>    <span class="token punctuation">{</span>        <span class="token string">"text"</span><span class="token punctuation">:</span> <span class="token string">"車"</span><span class="token punctuation">,</span>        <span class="token string">"role"</span><span class="token punctuation">:</span> <span class="token string">"B"</span><span class="token punctuation">,</span>        <span class="token string">"pix"</span><span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">330.0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">359.0</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>        <span class="token string">"text"</span><span class="token punctuation">:</span> <span class="token string">"馬"</span><span class="token punctuation">,</span>        <span class="token string">"role"</span><span class="token punctuation">:</span> <span class="token string">"B"</span><span class="token punctuation">,</span>        <span class="token string">"pix"</span><span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">247.0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">359.0</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>        <span class="token string">"text"</span><span class="token punctuation">:</span> <span class="token string">"相"</span><span class="token punctuation">,</span>        <span class="token string">"role"</span><span class="token punctuation">:</span> <span class="token string">"B"</span><span class="token punctuation">,</span>        <span class="token string">"pix"</span><span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">166.0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">359.0</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>        <span class="token string">"text"</span><span class="token punctuation">:</span> <span class="token string">"仕"</span><span class="token punctuation">,</span>        <span class="token string">"role"</span><span class="token punctuation">:</span> <span class="token string">"B"</span><span class="token punctuation">,</span>        <span class="token string">"pix"</span><span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">86.0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">359.0</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>        <span class="token string">"text"</span><span class="token punctuation">:</span> <span class="token string">"帥"</span><span class="token punctuation">,</span>        <span class="token string">"role"</span><span class="token punctuation">:</span> <span class="token string">"B"</span><span class="token punctuation">,</span>        <span class="token string">"pix"</span><span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">5.0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">359.0</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>        <span class="token string">"text"</span><span class="token punctuation">:</span> <span class="token string">"仕"</span><span class="token punctuation">,</span>        <span class="token string">"role"</span><span class="token punctuation">:</span> <span class="token string">"B"</span><span class="token punctuation">,</span>        <span class="token string">"pix"</span><span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token number">79.0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">359.0</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>        <span class="token string">"text"</span><span class="token punctuation">:</span> <span class="token string">"相"</span><span class="token punctuation">,</span>        <span class="token string">"role"</span><span class="token punctuation">:</span> <span class="token string">"B"</span><span class="token punctuation">,</span>        <span class="token string">"pix"</span><span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token number">159.0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">359.0</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>        <span class="token string">"text"</span><span class="token punctuation">:</span> <span class="token string">"馬"</span><span class="token punctuation">,</span>        <span class="token string">"role"</span><span class="token punctuation">:</span> <span class="token string">"B"</span><span class="token punctuation">,</span>        <span class="token string">"pix"</span><span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token number">239.0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">359.0</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>        <span class="token string">"text"</span><span class="token punctuation">:</span> <span class="token string">"車"</span><span class="token punctuation">,</span>        <span class="token string">"role"</span><span class="token punctuation">:</span> <span class="token string">"B"</span><span class="token punctuation">,</span>        <span class="token string">"pix"</span><span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token number">318.0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">359.0</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>        <span class="token string">"text"</span><span class="token punctuation">:</span> <span class="token string">"卒"</span><span class="token punctuation">,</span>        <span class="token string">"role"</span><span class="token punctuation">:</span> <span class="token string">"B"</span><span class="token punctuation">,</span>        <span class="token string">"pix"</span><span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">329.0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">126.0</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>        <span class="token string">"text"</span><span class="token punctuation">:</span> <span class="token string">"卒"</span><span class="token punctuation">,</span>        <span class="token string">"role"</span><span class="token punctuation">:</span> <span class="token string">"B"</span><span class="token punctuation">,</span>        <span class="token string">"pix"</span><span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">167.0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">126.0</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>        <span class="token string">"text"</span><span class="token punctuation">:</span> <span class="token string">"卒"</span><span class="token punctuation">,</span>        <span class="token string">"role"</span><span class="token punctuation">:</span> <span class="token string">"B"</span><span class="token punctuation">,</span>        <span class="token string">"pix"</span><span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">6.0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">126.0</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>        <span class="token string">"text"</span><span class="token punctuation">:</span> <span class="token string">"卒"</span><span class="token punctuation">,</span>        <span class="token string">"role"</span><span class="token punctuation">:</span> <span class="token string">"B"</span><span class="token punctuation">,</span>        <span class="token string">"pix"</span><span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token number">156.0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">117.0</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>        <span class="token string">"text"</span><span class="token punctuation">:</span> <span class="token string">"卒"</span><span class="token punctuation">,</span>        <span class="token string">"role"</span><span class="token punctuation">:</span> <span class="token string">"B"</span><span class="token punctuation">,</span>        <span class="token string">"pix"</span><span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token number">319.0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">117.0</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>        <span class="token string">"text"</span><span class="token punctuation">:</span> <span class="token string">"炮"</span><span class="token punctuation">,</span>        <span class="token string">"role"</span><span class="token punctuation">:</span> <span class="token string">"B"</span><span class="token punctuation">,</span>        <span class="token string">"pix"</span><span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">248.0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">199.0</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>        <span class="token string">"text"</span><span class="token punctuation">:</span> <span class="token string">"炮"</span><span class="token punctuation">,</span>        <span class="token string">"role"</span><span class="token punctuation">:</span> <span class="token string">"B"</span><span class="token punctuation">,</span>        <span class="token string">"pix"</span><span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token number">239.0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">199.0</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="第四步：绘制棋盘"><a href="#第四步：绘制棋盘" class="headerlink" title="第四步：绘制棋盘"></a>第四步：绘制棋盘</h1><p>如下图，棋盘是由网格组成，中间有一个“楚河——漢界”。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 绘制棋盘函数</span><span class="token keyword">def</span> <span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 绘制网格边框</span>    pen<span class="token punctuation">.</span>penup<span class="token punctuation">(</span><span class="token punctuation">)</span>    pen<span class="token punctuation">.</span>setposition<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">360</span><span class="token punctuation">,</span> <span class="token number">402</span><span class="token punctuation">)</span>    pen<span class="token punctuation">.</span>pendown<span class="token punctuation">(</span><span class="token punctuation">)</span>    pen<span class="token punctuation">.</span>color<span class="token punctuation">(</span><span class="token string">"#6E3F25"</span><span class="token punctuation">)</span>    pen<span class="token punctuation">.</span>width<span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> x <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> x <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span>            pen<span class="token punctuation">.</span>forward<span class="token punctuation">(</span><span class="token number">710</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            pen<span class="token punctuation">.</span>forward<span class="token punctuation">(</span><span class="token number">795</span><span class="token punctuation">)</span>        pen<span class="token punctuation">.</span>right<span class="token punctuation">(</span><span class="token number">90</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 绘制网格</span>    pen<span class="token punctuation">.</span>penup<span class="token punctuation">(</span><span class="token punctuation">)</span>    pen<span class="token punctuation">.</span>setposition<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">330</span><span class="token punctuation">,</span> <span class="token number">370</span><span class="token punctuation">)</span>    pen<span class="token punctuation">.</span>width<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>    pen<span class="token punctuation">.</span>pendown<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> x <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        pen<span class="token punctuation">.</span>forward<span class="token punctuation">(</span><span class="token number">650</span><span class="token punctuation">)</span>        pen<span class="token punctuation">.</span>backward<span class="token punctuation">(</span><span class="token number">650</span><span class="token punctuation">)</span>        pen<span class="token punctuation">.</span>right<span class="token punctuation">(</span><span class="token number">90</span><span class="token punctuation">)</span>        pen<span class="token punctuation">.</span>forward<span class="token punctuation">(</span><span class="token number">81</span><span class="token punctuation">)</span>        pen<span class="token punctuation">.</span>left<span class="token punctuation">(</span><span class="token number">90</span><span class="token punctuation">)</span>    pen<span class="token punctuation">.</span>forward<span class="token punctuation">(</span><span class="token number">650</span><span class="token punctuation">)</span>    pen<span class="token punctuation">.</span>left<span class="token punctuation">(</span><span class="token number">90</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> x <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        pen<span class="token punctuation">.</span>forward<span class="token punctuation">(</span><span class="token number">730</span><span class="token punctuation">)</span>        pen<span class="token punctuation">.</span>backward<span class="token punctuation">(</span><span class="token number">730</span><span class="token punctuation">)</span>        pen<span class="token punctuation">.</span>left<span class="token punctuation">(</span><span class="token number">90</span><span class="token punctuation">)</span>        pen<span class="token punctuation">.</span>forward<span class="token punctuation">(</span><span class="token number">81</span><span class="token punctuation">)</span>        pen<span class="token punctuation">.</span>right<span class="token punctuation">(</span><span class="token number">90</span><span class="token punctuation">)</span>    pen<span class="token punctuation">.</span>penup<span class="token punctuation">(</span><span class="token punctuation">)</span>    pen<span class="token punctuation">.</span>setposition<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">280</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span>    pen<span class="token punctuation">.</span>pendown<span class="token punctuation">(</span><span class="token punctuation">)</span>    pen<span class="token punctuation">.</span>pencolor<span class="token punctuation">(</span><span class="token string">"#F4C79E"</span><span class="token punctuation">)</span>    pen<span class="token punctuation">.</span>right<span class="token punctuation">(</span><span class="token number">90</span><span class="token punctuation">)</span>    pen<span class="token punctuation">.</span>width<span class="token punctuation">(</span><span class="token number">79</span><span class="token punctuation">)</span>    pen<span class="token punctuation">.</span>forward<span class="token punctuation">(</span><span class="token number">550</span><span class="token punctuation">)</span>    pen<span class="token punctuation">.</span>width<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    pen<span class="token punctuation">.</span>penup<span class="token punctuation">(</span><span class="token punctuation">)</span>    pen<span class="token punctuation">.</span>setposition<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">230</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">25</span><span class="token punctuation">)</span>    pen<span class="token punctuation">.</span>color<span class="token punctuation">(</span><span class="token string">"#6E3F25"</span><span class="token punctuation">)</span>    pen<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">"楚河"</span><span class="token punctuation">,</span> align<span class="token operator">=</span><span class="token string">"center"</span><span class="token punctuation">,</span> font<span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">"Baoli TC"</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token string">"bold"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    pen<span class="token punctuation">.</span>penup<span class="token punctuation">(</span><span class="token punctuation">)</span>    pen<span class="token punctuation">.</span>forward<span class="token punctuation">(</span><span class="token number">450</span><span class="token punctuation">)</span>    pen<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">"漢界"</span><span class="token punctuation">,</span> align<span class="token operator">=</span><span class="token string">"center"</span><span class="token punctuation">,</span> font<span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">"Baoli TC"</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token string">"bold"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    pen<span class="token punctuation">.</span>penup<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">3.0</span><span class="token punctuation">,</span> <span class="token number">290.0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">4.0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">278.0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        pen<span class="token punctuation">.</span>up<span class="token punctuation">(</span><span class="token punctuation">)</span>        pen<span class="token punctuation">.</span>setposition<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        pen<span class="token punctuation">.</span>down<span class="token punctuation">(</span><span class="token punctuation">)</span>        pen<span class="token punctuation">.</span>setheading<span class="token punctuation">(</span><span class="token number">45</span><span class="token punctuation">)</span>        pen<span class="token punctuation">.</span>pendown<span class="token punctuation">(</span><span class="token punctuation">)</span>        pen<span class="token punctuation">.</span>width<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>        pen<span class="token punctuation">.</span>color<span class="token punctuation">(</span><span class="token string">"#5E3F25"</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> x <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            pen<span class="token punctuation">.</span>forward<span class="token punctuation">(</span><span class="token number">114</span><span class="token punctuation">)</span>            pen<span class="token punctuation">.</span>backward<span class="token punctuation">(</span><span class="token number">114</span><span class="token punctuation">)</span>            pen<span class="token punctuation">.</span>left<span class="token punctuation">(</span><span class="token number">90</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> x <span class="token keyword">in</span> array<span class="token punctuation">:</span>        <span class="token keyword">if</span> x<span class="token punctuation">[</span><span class="token string">"role"</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">"A"</span><span class="token punctuation">:</span>            chess<span class="token punctuation">(</span>x<span class="token punctuation">[</span><span class="token string">"text"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> x<span class="token punctuation">[</span><span class="token string">"pix"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">"#A46A0C"</span><span class="token punctuation">,</span> <span class="token string">"#2F1500"</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            chess<span class="token punctuation">(</span>x<span class="token punctuation">[</span><span class="token string">"text"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> x<span class="token punctuation">[</span><span class="token string">"pix"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">"#E69772"</span><span class="token punctuation">,</span> <span class="token string">"#AB2A0E"</span><span class="token punctuation">)</span>    turtle<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 刷新图像</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/20200712205826616.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3l3c3lkd3Nibg==,size_16,color_FFFFFF,t_70" alt></p><h1 id="第五步：定义落子函数"><a href="#第五步：定义落子函数" class="headerlink" title="第五步：定义落子函数"></a>第五步：定义落子函数</h1><p>如下图，我们每一次点击棋子并落下过程中，后台会显示我们点击棋子的状态和是否落子。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 落子函数</span><span class="token keyword">def</span> <span class="token function">chess</span><span class="token punctuation">(</span>text<span class="token punctuation">,</span> pix<span class="token punctuation">,</span> bgcolor<span class="token punctuation">,</span> textcolor<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    text:     落子显示文本    pix:      落子坐标    bgcolor:  背景颜色    textcolor:落子颜色    """</span>    pen<span class="token punctuation">.</span>penup<span class="token punctuation">(</span><span class="token punctuation">)</span>    pen<span class="token punctuation">.</span>setposition<span class="token punctuation">(</span>pix<span class="token punctuation">)</span>    pen<span class="token punctuation">.</span>pendown<span class="token punctuation">(</span><span class="token punctuation">)</span>    pen<span class="token punctuation">.</span>color<span class="token punctuation">(</span><span class="token string">"#6E3F25"</span><span class="token punctuation">)</span>    pen<span class="token punctuation">.</span>dot<span class="token punctuation">(</span><span class="token number">70</span><span class="token punctuation">)</span>    pen<span class="token punctuation">.</span>color<span class="token punctuation">(</span>bgcolor<span class="token punctuation">)</span>    pen<span class="token punctuation">.</span>dot<span class="token punctuation">(</span><span class="token number">55</span><span class="token punctuation">)</span>    pen<span class="token punctuation">.</span>color<span class="token punctuation">(</span><span class="token string">"white"</span><span class="token punctuation">)</span>    pen<span class="token punctuation">.</span>penup<span class="token punctuation">(</span><span class="token punctuation">)</span>    pen<span class="token punctuation">.</span>setheading<span class="token punctuation">(</span><span class="token number">270</span><span class="token punctuation">)</span>    pen<span class="token punctuation">.</span>forward<span class="token punctuation">(</span><span class="token number">25</span><span class="token punctuation">)</span>    pen<span class="token punctuation">.</span>color<span class="token punctuation">(</span>textcolor<span class="token punctuation">)</span>    pen<span class="token punctuation">.</span>write<span class="token punctuation">(</span>text<span class="token punctuation">,</span> align<span class="token operator">=</span><span class="token string">"center"</span><span class="token punctuation">,</span> font<span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">"Baoli TC"</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">,</span> <span class="token string">"bold"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>落子情况：</p><p><img src="https://img-blog.csdnimg.cn/20200712205943984.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3l3c3lkd3Nibg==,size_16,color_FFFFFF,t_70" alt></p><h1 id="第六步：鼠标点击事件"><a href="#第六步：鼠标点击事件" class="headerlink" title="第六步：鼠标点击事件"></a>第六步：鼠标点击事件</h1><p>当我们点击棋子时会触发相应的时间，如上图所示，比如当我们点击“卒”时，它会显示我们点击的是哪一方的棋子，棋子的坐标是什么。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">click</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">global</span> priChess    <span class="token keyword">if</span> priChess <span class="token operator">==</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> z <span class="token keyword">in</span> array<span class="token punctuation">:</span>            <span class="token keyword">if</span> abs<span class="token punctuation">(</span>z<span class="token punctuation">[</span><span class="token string">"pix"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">-</span> x<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">35</span> <span class="token operator">and</span> abs<span class="token punctuation">(</span>z<span class="token punctuation">[</span><span class="token string">"pix"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> y<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">35</span><span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"发现目标："</span><span class="token punctuation">,</span> z<span class="token punctuation">)</span>                priChess <span class="token operator">=</span> z                pen<span class="token punctuation">.</span>penup<span class="token punctuation">(</span><span class="token punctuation">)</span>                pen<span class="token punctuation">.</span>setposition<span class="token punctuation">(</span>z<span class="token punctuation">[</span><span class="token string">"pix"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                pen<span class="token punctuation">.</span>color<span class="token punctuation">(</span><span class="token string">"white"</span><span class="token punctuation">)</span>                pen<span class="token punctuation">.</span>penup<span class="token punctuation">(</span><span class="token punctuation">)</span>                pen<span class="token punctuation">.</span>setheading<span class="token punctuation">(</span><span class="token number">270</span><span class="token punctuation">)</span>                pen<span class="token punctuation">.</span>forward<span class="token punctuation">(</span><span class="token number">25</span><span class="token punctuation">)</span>                pen<span class="token punctuation">.</span>write<span class="token punctuation">(</span>z<span class="token punctuation">[</span><span class="token string">"text"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> align<span class="token operator">=</span><span class="token string">"center"</span><span class="token punctuation">,</span> font<span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">"Baoli TC"</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">,</span> <span class="token string">"bold"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">break</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"落子"</span><span class="token punctuation">)</span>        priChess<span class="token punctuation">[</span><span class="token string">"pix"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span>        array<span class="token punctuation">.</span>append<span class="token punctuation">(</span>priChess<span class="token punctuation">)</span>        priChess <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>        pen<span class="token punctuation">.</span>reset<span class="token punctuation">(</span><span class="token punctuation">)</span>        draw<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> turtle </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue 3.0 来了，我们该做些什么？</title>
      <link href="/2020/12/10/vue-3-0/"/>
      <url>/2020/12/10/vue-3-0/</url>
      
        <content type="html"><![CDATA[<h1 id="靓仔路过，不要错过"><a href="#靓仔路过，不要错过" class="headerlink" title="靓仔路过，不要错过"></a>靓仔路过，不要错过</h1><p>想必 Vue3.0 发布这件事，大家都知道了。</p><p><img src="https://img-blog.csdnimg.cn/20200922212237188.png#pic_center" alt></p><p>我也是从朋友圈的转发得知此事，博客平台、公众号、朋友圈基本都有这么一条新闻，可见 Vue3.0 的被期待程度，因为 React 16 发布的时候，我也没见大家这么追捧，让我有点震惊的是 Vue 有 130 万的使用者，这个体量真的是有点惊人。</p><p><img src="https://img-blog.csdnimg.cn/20200922212247130.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3l3c3lkd3Nibg==,size_16,color_FFFFFF,t_70#pic_center" alt></p><p>Vue 3.0 来了，我们该做些什么呢？</p><ul><li>学习，赶紧学习，学不动了也要学！</li><li>装不知道，我是一只快乐的鸵鸟，我不知道 Vue 更新了，继续摸鱼爽歪歪。</li><li>为了下半年的 KPI，冲冲冲！把手头的 Vue 项目进行版本升级和重构。</li></ul><p><img src="https://img-blog.csdnimg.cn/20200922212317706.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3l3c3lkd3Nibg==,size_16,color_FFFFFF,t_70#pic_center" alt></p><h1 id="Vue3-0-更新了啥"><a href="#Vue3-0-更新了啥" class="headerlink" title="Vue3.0 更新了啥"></a>Vue3.0 更新了啥</h1><p><strong>让我总结的话，就只有两个比较重要的更新（我目前还没有完完整整的体验过新版本，有些地方可能不够完善，希望大家多多包涵，后续会整理和分享一些实践的 demo）。</strong></p><p>一个是 Composition API，另一个是对 TypeScript 的全面支持。<br>团队还会出一个 Vue 2.7 的版本，给予 2.x 用户一些在 3.0 版本中被删除方法的警告，这有助于用户的平稳升级。</p><p>Nuxt3 好像还在路上，但是目前看来，市面上的各大组件库还没来得及针对 Vue3.0 进行改版升级。</p><p>周边的插件如 Vue-Router、Vuex、VSCode 插件 Vetur 等都在有序的进行中。</p><h1 id="Vue3-0-具体更新了啥"><a href="#Vue3-0-具体更新了啥" class="headerlink" title="Vue3.0 具体更新了啥"></a>Vue3.0 具体更新了啥</h1><p>来点阳间的知识，说点人话。</p><p><img src="https://img-blog.csdnimg.cn/20200922212401727.png#pic_center" alt></p><p>下面以代码片段的形式为大家介绍一下 Vue3.0 作出了哪些新的变化，Vue2.x 对应一些 Vue3.0 的写法。</p><h2 id="应用的配置项"><a href="#应用的配置项" class="headerlink" title="应用的配置项"></a>应用的配置项</h2><blockquote><p>config 是一个包含 Vue 应用程序全局配置的对象。可以在挂载应用程序之前修改下面列出的属性。</p></blockquote><ul><li>devtools  <strong>类型</strong>： boolean <strong>默认值</strong>： true    <strong>如何使用</strong>：</li></ul><pre class="line-numbers language-javascript"><code class="language-javascript">app<span class="token punctuation">.</span>config<span class="token punctuation">.</span>devtools <span class="token operator">=</span> <span class="token boolean">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>是否开启 vue-devtools 工具的检测，默认情况下开发环境是 true，生产环境下则为 false。</p></blockquote><ul><li>errorHandler <strong>类型</strong>： Function <strong>默认值</strong>： undefined <strong>如何使用</strong>：</li></ul><pre class="line-numbers language-javascript"><code class="language-javascript">app<span class="token punctuation">.</span>config<span class="token punctuation">.</span>errorHandler <span class="token operator">=</span> <span class="token punctuation">(</span>err<span class="token punctuation">,</span> vm<span class="token punctuation">,</span> info<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// info 为 Vue 在某个生命周期发生错误的信息</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>为组件渲染功能和观察程序期间的未捕获错误分配处理程序。</p></blockquote><ul><li>globalProperties 🌟 <strong>类型</strong>： [key: string]: any <strong>默认值</strong>： undefined <strong>如何使用</strong>：</li></ul><pre class="line-numbers language-javascript"><code class="language-javascript">app<span class="token punctuation">.</span>config<span class="token punctuation">.</span>globalProperties<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'十三'</span>app<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">'c-component'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>  <span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// '十三'</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>若是组件内也有 name 属性，则组建内的属性权限比较高。</p></blockquote><p>还有一个知识点很重要，在 Vue2.x 中，我们定义一个全局属性或者方法都是如下所示：</p><pre class="line-numbers language-javascript"><code class="language-javascript">Vue<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>$md5 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在 Vue3.0 中，我们便可这样定义：</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">const</span> app <span class="token operator">=</span> Vue<span class="token punctuation">.</span><span class="token function">createApp</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span>config<span class="token punctuation">.</span>globalProperties<span class="token punctuation">.</span>$md5 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>performance <strong>类型：</strong> boolean <strong>默认值：</strong> false <strong>如何使用：</strong></li></ul><pre class="line-numbers language-javascript"><code class="language-javascript">app<span class="token punctuation">.</span>config<span class="token punctuation">.</span>performance <span class="token operator">=</span> <span class="token boolean">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>将其设置为 true 可在浏览器 devtool 性能/时间线面板中启用组件初始化，编译，渲染和补丁性能跟踪。 仅在开发模式和支持<br>Performance.mark API的浏览器中工作。</p></blockquote><h2 id="Application-API"><a href="#Application-API" class="headerlink" title="Application API"></a>Application API</h2><p>全局改变的动作，都在 createApp 所创建的应用实例中，如下所示：</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">{</span> createApp <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">createApp</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>那么 app 下这些属性：</p><ul><li><strong>component 参数</strong>： 第一个参数 string 类型表示组件名，第二个参数 Function 或 Object  <strong>返回值：</strong> 只传第一个参数，返回组建。带上第二个参数则返回应用程序实例 <strong>如何使用：</strong></li></ul><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">{</span> createApp <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">createApp</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 注册一个 options 对象</span>app<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">'shisan-component'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">/* ... */</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 检索注册的组件</span><span class="token keyword">const</span> ShiSanComponent <span class="token operator">=</span> app<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">'shisan-component'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><strong>config</strong> (上面第一段讲过了)</li><li><strong>directive</strong> 自定义指令变化不大，还是之前那些东西，如下：</li></ul><pre class="line-numbers language-javascript"><code class="language-javascript">app<span class="token punctuation">.</span><span class="token function">directive</span><span class="token punctuation">(</span><span class="token string">'my-directive'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 挂载前</span>  <span class="token function">beforeMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// 挂载后</span>  <span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// 更新前</span>  <span class="token function">beforeUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// 更新后</span>  <span class="token function">updated</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// 卸载前</span>  <span class="token function">beforeUnmount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// 卸载后</span>  <span class="token function">unmounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>多数全局API都没变化，还是老的 2.x 的写法居多。</p><h1 id="Composition-API"><a href="#Composition-API" class="headerlink" title="Composition API"></a>Composition API</h1><p>Composition API解决了什么问题？<br>使用传统的 Vue2.x 配置方法写组件的时候问题，随着业务复杂度越来越高，代码量会不断的加大。由于相关业务的代码需要遵循option 的配置写到特定的区域，导致后续维护非常的复杂，同时代码可复用性不高，你常常会发现一个页面组件，写着写着就写到了三四百行去了。<br><img src="https://img-blog.csdnimg.cn/20200923084317354.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3l3c3lkd3Nibg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>有没有熟悉的感觉？没错这就是老的模式带来的弊端，一直憋了这么久，也没谁了～～而 Composition API 解决了这个令人头疼的问题。它为我们提供了几个函数，如下所示：</p><ul><li>reactive</li><li>watchEffect</li><li>computed</li><li>ref</li><li>toRefs</li><li>hooks</li></ul><h2 id="reactive"><a href="#reactive" class="headerlink" title="reactive"></a>reactive</h2><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">{</span> reactive<span class="token punctuation">,</span> computed <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span> <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> state <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    a<span class="token punctuation">:</span> <span class="token number">0</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token keyword">function</span> <span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    state<span class="token punctuation">.</span>a<span class="token operator">++</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token punctuation">{</span>    state<span class="token punctuation">,</span>    increment  <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>reactive 相当于 Vue2.x 的 Vue.observable () API，经过 reactive<br>处理后的函数能变成响应式的数据，类似之前写模板页面时定义的 data 属性的值。</p></blockquote><h2 id="watchEffect"><a href="#watchEffect" class="headerlink" title="watchEffect"></a>watchEffect</h2><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">{</span> reactive<span class="token punctuation">,</span> computed<span class="token punctuation">,</span> watchEffect <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> state <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">{</span> a<span class="token punctuation">:</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">const</span> double <span class="token operator">=</span> <span class="token function">computed</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> state<span class="token punctuation">.</span>a <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">)</span>    <span class="token keyword">function</span> <span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      state<span class="token punctuation">.</span>count<span class="token operator">++</span>    <span class="token punctuation">}</span>    <span class="token keyword">const</span> wa <span class="token operator">=</span> <span class="token function">watchEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 使用到了哪个 ref/reactive 对象.value, 就监听哪个</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>double<span class="token punctuation">.</span>value<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 可以通过 wa.stop 停止监听</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      state<span class="token punctuation">,</span>      increment    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>watchEffect 被称之为副作用，立即执行传入的一个函数，并响应式追踪其依赖，并在其依赖变更时重新运行该函数。</p></blockquote><h2 id="computed"><a href="#computed" class="headerlink" title="computed"></a>computed</h2><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">{</span> reactive<span class="token punctuation">,</span> computed <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token keyword">const</span> state <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    a<span class="token punctuation">:</span> <span class="token number">0</span>   <span class="token punctuation">}</span><span class="token punctuation">)</span>   <span class="token keyword">const</span> double <span class="token operator">=</span> <span class="token function">computed</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> state<span class="token punctuation">.</span>a <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">)</span>   <span class="token keyword">function</span> <span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    state<span class="token punctuation">.</span>a<span class="token operator">++</span>   <span class="token punctuation">}</span>   <span class="token keyword">return</span> <span class="token punctuation">{</span>    double<span class="token punctuation">,</span>    state<span class="token punctuation">,</span>    increment   <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>这就比较直观了，computed 在 Vue2.x 就存在了，只不过现在使用的形式变了一下，需要被计算的属性，通过上述形式返回。</p></blockquote><h2 id="ref-和-toRefs"><a href="#ref-和-toRefs" class="headerlink" title="ref 和 toRefs"></a>ref 和 toRefs</h2><p>toRefs 提供了一个方法可以把 reactive 的值处理为 ref，也就是将响应式的对象处理为普通对象。</p><h2 id="hooks"><a href="#hooks" class="headerlink" title="hooks"></a>hooks</h2><p>与 2.x 版本相对应的生命周期钩子</p><table><thead><tr><th>Vue2.x 的生命周期</th><th>Vue3.x 的生命周期</th></tr></thead><tbody><tr><td>beforeCreate</td><td>setup()</td></tr><tr><td>created</td><td>setup()</td></tr><tr><td>beforeMount</td><td>onBeforeMount</td></tr><tr><td>mounted</td><td>onMounted</td></tr><tr><td>beforeUpdate</td><td>onBeforeUpdate</td></tr><tr><td>updated</td><td>onUpdated</td></tr><tr><td>beforeDestroy</td><td>onBeforeUnmount</td></tr><tr><td>destroyed</td><td>onUnmounted</td></tr><tr><td>errorCaptured</td><td>onErrorCaptured</td></tr></tbody></table><p>Vue3.0 在 Composition API 中另外加了两个钩子，分别是 <code>onRenderTracked</code> 和 <code>onRenderTriggered</code>，两个钩子函数都接收一个 <code>DebuggerEvent</code> :</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  <span class="token function">onRenderTriggered</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">debugger</span>    <span class="token comment" spellcheck="true">// 检查哪个依赖性导致组件重新渲染</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="Vue-3-来了，我们要做些什么？"><a href="#Vue-3-来了，我们要做些什么？" class="headerlink" title="Vue 3 来了，我们要做些什么？"></a>Vue 3 来了，我们要做些什么？</h1><p>前面我也开玩笑的讲了三条，要么装不知道，要么赶紧学，而已经学习了 Vue 3 的朋友可以用到自己的项目中，对项目进行优化和升级。这样，在年终总结就可以加上最重要的一条：<strong>带领团队成员完成了项目的重构，包括逻辑重构 + 语法升级，全面适配 Vue 3！打包效率提升xx倍！页面响应速度提升 xx！</strong></p><p>不仅仅如此，对于学生党或者还在找工作的同学来说，可能在准备面试时又需要多准备一些内容了，冲冲冲！</p><p>最后，我想了想我能够做些什么，首先装鸵鸟是不行的，然后不学习也是不行的，因为我上半年的时候写了一个 Vue 的商城项目并开源到 GitHub 网站上，页面效果如下所示：</p><p><img src="https://img-blog.csdnimg.cn/20200923085007978.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3l3c3lkd3Nibg==,size_16,color_FFFFFF,t_70#pic_center" alt></p><blockquote><p>newbee-mall 在 GitHub 和国内的码云都创建了代码仓库，如果有人访问 GitHub 比较慢的话，建议在 Gitee<br>上查看该项目，两个仓库会保持同步更新。</p></blockquote><ul><li><a href="newbee-mall%20in%20GitHub%20:%20https://github.com/newbee-ltd/newbee-mall-vue-app">newbee-mall in GitHub : https://github.com/newbee-ltd/newbee-mall-vue-app</a></li><li><a href="newbee-mall%20in%20Gitee%20:%20https://gitee.com/newbee-ltd/newbee-mall-vue-app">newbee-mall in Gitee : https://gitee.com/newbee-ltd/newbee-mall-vue-app</a></li></ul><p>通过预览图，大家应该也可以看得出来，这不是一个基础的 demo，而是一个功能较为完善的 Vue.js 商城实战系统。</p><p>这里，大家可以放心，我一直都回答会升级到 Vue3，并且代码依然全部开源，希望大家都去点个 star，你们越热情，我也会更有动力去重构项目到 Vue3 版本！所以，对我个人来说，其实一直在等着 Vue.js 3.0 版本的正式发布，之后我会抽时间把这个 Vue.js 实战商城项目用 Vue3 再写一下。大家可以给新蜂商城项目点个 star，star 数量越多，我也越有精神头儿去更新，哈哈哈哈哈。</p><p><img src="https://img-blog.csdnimg.cn/20200923085100409.png#pic_center" alt></p><p>这样，大家就有了 Vue3 的实战经验啦！</p>]]></content>
      
      
      <categories>
          
          <category> 开发日常 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue 3.0 </tag>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数学评价模型（一）：层次分析法</title>
      <link href="/2020/12/08/analytic-hierarchy-process/"/>
      <url>/2020/12/08/analytic-hierarchy-process/</url>
      
        <content type="html"><![CDATA[<p><strong>层次分析法（Analytic Hierarchy Process，简称 AHP）</strong>是对一些较为复杂、较为模糊的问题作出决策的简易方法，它特别适用于那些难于完全定量分析的问题。它是美国运筹学家 T. L. Saaty 教授于上世纪 70 年代初期提出的一种简便、灵活而又实用的多准则决策方法。</p><h1 id="§1-层次分析法的基本原理与步骤"><a href="#§1-层次分析法的基本原理与步骤" class="headerlink" title="§1 层次分析法的基本原理与步骤"></a>§1 层次分析法的基本原理与步骤</h1><p>人们在进行社会的、经济的以及科学管理领域问题的系统分析中，面临的常常是一个由相互关联、相互制约的众多因素构成的复杂而往往缺少定量数据的系统。层次分析法为这类问题的决策和排序提供了一种新的、简洁而实用的建模方法。</p><p>运用层次分析法建模，大体上可按下面四个步骤进行：</p><ul><li>（i）建立递阶层次结构模型；</li><li>（ii）构造出各层次中的所有判断矩阵；</li><li>（iii）层次单排序及一致性检验；</li><li>（iv）层次总排序及一致性检验。</li></ul><p>下面分别说明这四个步骤的实现过程。</p><h2 id="1-1-递阶层次结构的建立与特点"><a href="#1-1-递阶层次结构的建立与特点" class="headerlink" title="1.1 递阶层次结构的建立与特点"></a>1.1 递阶层次结构的建立与特点</h2><p>应用 AHP 分析决策问题时，首先要把问题条理化、层次化，构造出一个有层次的结构模型。在这个模型下，复杂问题被分解为元素的组成部分。这些元素又按其属性及关系形成若干层次。上一层次的元素作为准则对下一层次有关元素起支配作用。</p><p>这些层次可以分为三类：</p><ul><li>最高层：这一层次中只有一个元素，一般它是分析问题的预定目标或理想结果，因此也称为目标层。</li><li>中间层：这一层次中包含了为实现目标所涉及的中间环节，它可以由若干个层次组成，包括所需考虑的准则、子准则，因此也称为准则层。</li><li>最底层：这一层次包括了为实现目标可供选择的各种措施、决策方案等，因此也称为措施层或方案层。</li></ul><p>递阶层次结构中的层次数与问题的复杂程度及需要分析的详尽程度有关，一般地层次数不受限制。每一层次中各元素所支配的元素一般不要超过 9 个。这是因为支配的元素过多会给两两比较判断带来困难。</p><blockquote><p>下面结合一个实例来说明递阶层次结构的建立</p></blockquote><p>假期旅游有P1 、P2 、P3 个旅游胜地供你选择，试确定一个最佳地点。在此问题中，你会根据诸如景色、费用、居住、饮食和旅途条件等一些准则去反复比较 3 个侯选地点。可以建立如图 1 的层次结构模型。</p><p><img src="https://img-blog.csdnimg.cn/2020040518094884.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3l3c3lkd3Nibg==,size_16,color_FFFFFF,t_70" alt>​​</p><h2 id="1-2-构造判断矩阵"><a href="#1-2-构造判断矩阵" class="headerlink" title="1.2 构造判断矩阵"></a>1.2 构造判断矩阵</h2><p>层次结构反映了因素之间的关系，但准则层中的各准则在目标衡量中所占的比重并不一定相同，在决策者的心目中，它们各占有一定的比例。</p><p>在确定影响某因素的诸因子 在该因素中所占的比重时，遇到的主要困难是这些比重常常不易定量化。此外，当影响某因素的因子较多时，直接考虑各因子对该因素有多大程度的影响时，常常会因考虑不周全、顾此失彼而使决策者提出与他实际认为的重要性程度不相一致的数据，甚至有可能提出一组隐含矛盾的数据。</p><p><strong>为看清这一点，可作如下假设：</strong></p><p>将一块重为 1 千克的石块砸成 n 小块，你可以精确称出它们的重量，<br>设为w1,w2,…,wn，现在，请人估计这 n 小块的重量占总重量的比例（不能让他知道各小石块的重量），此人不仅很难给出精确的比值，而且完全可能因顾此失彼而提供彼此矛盾的数据。</p><p><img src="https://i.loli.net/2020/12/09/EMFNe84xcYR9tnJ.png" alt></p><p><em>定义 1</em>  若矩阵<img src="https://i.loli.net/2020/12/09/7HAEmKg3Twe4Ijz.png" alt>满足</p><p><img src="https://i.loli.net/2020/12/09/WiIGXFduNUAa5Sf.png" alt></p><p>关于如何确定aij的值，Saaty 等建议引用数字 1<del>9 及其倒数作为标度。表 1 列出了 1</del>9 标度的含义：</p><p><img src="https://img-blog.csdnimg.cn/20200405182514824.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3l3c3lkd3Nibg==,size_16,color_FFFFFF,t_70" alt></p><p>从心理学观点来看，分级太多会超越人们的判断能力，既增加了作判断的难度，又容易因此而提供虚假数据。Saaty 等人还用实验方法比较了在各种不同标度下人们判断结果的正确性，实验结果也表明，采用 1~9 标度最为合适。</p><p>最后，应该指出，一般地作n(n-1)/2次两两判断是必要的。有人认为把所有元素都和某个元素比较，即只作n - 1次比较就可以了。这种作法的弊病在于，任何一个判断的失误均可导致不合理的排序，而个别判断的失误对于难以定量的系统往往是难以<br>避免的。进行n(n-1)/2次比较可以提供更多的信息，通过各种不同角度的反复比较，从而导出一个合理的排序。</p><h2 id="1-3-层次单排序及一致性检验"><a href="#1-3-层次单排序及一致性检验" class="headerlink" title="1.3 层次单排序及一致性检验"></a>1.3 层次单排序及一致性检验</h2><p>判断矩阵 A 对应于最大特征值的特征向量 W ，经归一化后即为同一层次相应因素对于上一层次某因素相对重要性的排序权值，这一过程称为层次单排序。上述构造成对比较判断矩阵的办法虽能减少其它因素的干扰，较客观地反映出一对因子影响力的差别。但综合全部比较结果时，其中难免包含一定程度的非一致性。如果比较结果是前后完全一致的，则矩阵 A 的元素还应当满足：</p><p><img src="https://i.loli.net/2020/12/09/XGfBr92h4c3oaKw.png" alt>                          (1)</p><p><em>定义 2 </em> 满足关系式（1）的正互反矩阵称为一致矩阵。<br>需要检验构造出来的（正互反）判断矩阵 A 是否严重地非一致，以便确定是否接受 A 。</p><p><strong>定理 1</strong> 正互反矩阵 A 的最大特征根必为正实数，其对应特征向量的所有分量均为正实数。 A 的其余特征值的模均严格小于。</p><p><strong>定理 2</strong>  若 A 为一致矩阵，则</p><ul><li>（i） A 必为正互反矩阵。</li><li>（ii） A 的转置矩阵AT 也是一致矩阵。</li><li>（iii） A 的任意两行成比例，比例因子大于零，从而 rank(A) = 1 （同样， A 的任意两列也成比例）。</li><li>（iv） A 的最大特征值 λmax=n，其中 n 为矩阵 A 的阶。 A 的其余特征根均为零。</li><li>（v）若 A 的最大特征值λmax对应的特征向量为 </li></ul><p><img src="https://i.loli.net/2020/12/09/tf1AZIncFTsMqwQ.png" alt></p><p>即</p><p><img src="https://img-blog.csdnimg.cn/20200405183900857.png" alt></p><p><strong>定理 3</strong>  n 阶正互反矩阵 A 为一致矩阵当且仅当其最大特征根 λmax=n ，且当正互反矩阵 A 非一致时，必有 λmax&gt;n 。</p><p>根据定理 3，我们可以由 λmax 是否等于 n 来检验判断矩阵 A 是否为一致矩阵。由于特征根连续地依赖于 ，故 λmax 比 n 大得越多， A 的非一致性程度也就越严重，λmax 对应的标准化特征向量也就越不能真实地反映出X={x1,x2,…,xn}在对因素 Z的影响中所占的比重。因此，对决策者提供的判断矩阵有必要作一次一致性检验，以决定是否能接受它。</p><p><strong>对判断矩阵的一致性检验的步骤如下：</strong></p><p>（i）计算一致性指标 CI</p><p><img src="https://i.loli.net/2020/12/09/inFvq9dM7phwUT1.png" alt></p><p>（ii）查找相应的平均随机一致性指标 RI 。对n=1,2,…,9 ，Saaty 给出了 RI 的值，如表 2 所示。</p><p><img src="https://img-blog.csdnimg.cn/20200405185016252.png" alt></p><p>RI 的值是这样得到的，用随机方法构造 500 个样本矩阵：随机地从 1~9 及其倒数中抽取数字构造正互反矩阵，求得最大特征根的平均值</p><p><img src="https://i.loli.net/2020/12/09/9KGEbd6ViehrHXq.png" alt></p><p>（ⅲ）计算一致性比例 CR</p><p><img src="https://i.loli.net/2020/12/09/gyJHE8pfLZ2M3Fj.png" alt></p><p>当 10 . 0 &lt; CR 时，认为判断矩阵的一致性是可以接受的，否则应对判断矩阵作适当修正。</p><h2 id="1-4-层次总排序及一致性检验"><a href="#1-4-层次总排序及一致性检验" class="headerlink" title="1.4 层次总排序及一致性检验"></a>1.4 层次总排序及一致性检验</h2><p>上面我们得到的是一组元素对其上一层中某元素的权重向量。我们最终要得到各元素，特别是最低层中各方案对于目标的排序权重，从而进行方案选择。总排序权重要自上而下地将单准则下的权重进行合成。</p><p><img src="https://img-blog.csdnimg.cn/2020040518535265.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3l3c3lkd3Nibg==,size_16,color_FFFFFF,t_70" alt></p><p>设上一层次（ A 层）包含 A1,A2,…,Am 共 m 个因素，它们的层次总排序权重分别为 a1,a2,…,am。又设其后的下一层次（ B 层）包含 n 个因素 B1,B2,…,Bn，它们关于 Aj 的层次单排序权重分别为 b1j,b2j,…,bnj（当 Bi 与 Aj 无关联时， bij=0 ）。现求 B 层中各因素关于总目标的权重 b1,b2,…,bn，即求 B 层各因素的层次总排序权重，计算按表 3 所示方式进行，即</p><p><img src="https://i.loli.net/2020/12/09/JLoDcEHdUkFSx9w.png" alt></p><p>对层次总排序也需作一致性检验，检验仍象层次总排序那样由高层到低层逐层进行。这是因为虽然各层次均已经过层次单排序的一致性检验，各成对比较判断矩阵都已具有较为满意的一致性。但当综合考察时，各层次的非一致性仍有可能积累起来，引起最终分析结果较严重的非一致性。</p><p>设 B 层中与 Aj 相关的因素的成对比较判断矩阵在单排序中经一致性检验，求得单排序一致性指标为  CI(j) ,（ j = 1,2,…,m），相应的平均随机一致性指标为 RI(j)(RI(j), CI(j)已在层次单排序时求得），则 B 层总排序随机一致性比例为</p><p><img src="https://i.loli.net/2020/12/09/VDELIlaMrpStyzX.png" alt></p><p>当 10 . 0 &lt; CR 时，认为层次总排序结果具有较满意的一致性并接受该分析结果。</p><h1 id="§2-层次分析法的应用"><a href="#§2-层次分析法的应用" class="headerlink" title="§2 层次分析法的应用"></a>§2 层次分析法的应用</h1><p>在应用层次分析法研究问题时，遇到的主要困难有两个：</p><ul><li>（i）如何根据实际情况抽象出较为贴切的层次结构；</li><li>（ii）如何将某些定性的量作比较接近实际定量化处理。层次分析法对人们的思维过程进行了加工整理，提出了一套系统分析问题的方法，为科学管理和决策提供了较有说服力的依据。</li></ul><p>但层次分析法也有其局限性，主要表现在：</p><ul><li><p>（i）它在很大程度上依赖于人们的经验，主观因素的影响很大，它至多只能排除思维过程中的严重非一致性，却无法排除决策者个人可能存在的严重片面性。</p></li><li><p>（ii）比较、判断过程较为粗糙，不能用于精度要求较高的决策问题。AHP 至多只能算是一种半定量（或定性与定量结合）的方法。在应用层次分析法时，建立层次结构模型是十分关键的一步。现再分析一个实例，以便说明如何从实际问题中抽象出相应的层次结构。</p><p>Matlab 程序如下：</p><pre class="line-numbers language-bash"><code class="language-bash">clc,clearfid<span class="token operator">=</span>fopen<span class="token punctuation">(</span><span class="token string">'txt3.txt'</span>,<span class="token string">'r'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>n1<span class="token operator">=</span>6<span class="token punctuation">;</span>n2<span class="token operator">=</span>3<span class="token punctuation">;</span>a<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span> i<span class="token operator">=</span>1:n1tmp<span class="token operator">=</span>str2num<span class="token punctuation">(</span>fgetl<span class="token punctuation">(</span>fid<span class="token punctuation">))</span><span class="token punctuation">;</span>a<span class="token operator">=</span><span class="token punctuation">[</span>a<span class="token punctuation">;</span>tmp<span class="token punctuation">]</span><span class="token punctuation">;</span> %读准则层判断矩阵end<span class="token keyword">for</span> i<span class="token operator">=</span>1:n1str1<span class="token operator">=</span>char<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'b'</span>,int2str<span class="token punctuation">(</span>i<span class="token punctuation">)</span>,<span class="token string">'=[];'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>str2<span class="token operator">=</span>char<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'b'</span>,int2str<span class="token punctuation">(</span>i<span class="token punctuation">)</span>,<span class="token string">'=[b'</span>,int2str<span class="token punctuation">(</span>i<span class="token punctuation">)</span>,<span class="token string">';tmp];'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>eval<span class="token punctuation">(</span>str1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> j<span class="token operator">=</span>1:n2tmp<span class="token operator">=</span>str2num<span class="token punctuation">(</span>fgetl<span class="token punctuation">(</span>fid<span class="token punctuation">))</span><span class="token punctuation">;</span>eval<span class="token punctuation">(</span>str2<span class="token punctuation">)</span><span class="token punctuation">;</span> %读方案层的判断矩阵endendri<span class="token operator">=</span><span class="token punctuation">[</span>0,0,0.58,0.90,1.12,1.24,1.32,1.41,1.45<span class="token punctuation">]</span><span class="token punctuation">;</span> %一致性指标<span class="token punctuation">[</span>x,y<span class="token punctuation">]</span><span class="token operator">=</span>eig<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>lamda<span class="token operator">=</span>max<span class="token punctuation">(</span>diag<span class="token punctuation">(</span>y<span class="token punctuation">))</span><span class="token punctuation">;</span>num<span class="token operator">=</span>find<span class="token punctuation">(</span>diag<span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token operator">==</span>lamda<span class="token punctuation">)</span><span class="token punctuation">;</span>w0<span class="token operator">=</span>x<span class="token punctuation">(</span>:,num<span class="token punctuation">)</span>/sum<span class="token punctuation">(</span>x<span class="token punctuation">(</span>:,num<span class="token punctuation">))</span><span class="token punctuation">;</span>cr0<span class="token operator">=</span><span class="token punctuation">(</span>lamda-n1<span class="token punctuation">)</span>/<span class="token punctuation">(</span>n1-1<span class="token punctuation">)</span>/ri<span class="token punctuation">(</span>n1<span class="token punctuation">)</span><span class="token keyword">for</span> i<span class="token operator">=</span>1:n1<span class="token punctuation">[</span>x,y<span class="token punctuation">]</span><span class="token operator">=</span>eig<span class="token punctuation">(</span>eval<span class="token punctuation">(</span>char<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'b'</span>,int2str<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">))</span><span class="token punctuation">)</span><span class="token punctuation">;</span>lamda<span class="token operator">=</span>max<span class="token punctuation">(</span>diag<span class="token punctuation">(</span>y<span class="token punctuation">))</span><span class="token punctuation">;</span>num<span class="token operator">=</span>find<span class="token punctuation">(</span>diag<span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token operator">==</span>lamda<span class="token punctuation">)</span><span class="token punctuation">;</span>w1<span class="token punctuation">(</span>:,i<span class="token punctuation">)</span><span class="token operator">=</span>x<span class="token punctuation">(</span>:,num<span class="token punctuation">)</span>/sum<span class="token punctuation">(</span>x<span class="token punctuation">(</span>:,num<span class="token punctuation">))</span><span class="token punctuation">;</span>cr1<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">=</span><span class="token punctuation">(</span>lamda-n2<span class="token punctuation">)</span>/<span class="token punctuation">(</span>n2-1<span class="token punctuation">)</span>/ri<span class="token punctuation">(</span>n2<span class="token punctuation">)</span><span class="token punctuation">;</span>endcr1, ts<span class="token operator">=</span>w1*w0, cr<span class="token operator">=</span>cr1*w0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p>纯文本文件txt3.txt中的数据格式如下：</p><pre class="line-numbers language-bash"><code class="language-bash">1 1 1 4 1 1/21 1 2 4 1 1/21 1/2 1 5 3 1/21/4 1/4 1/5 1  1/3 1/31 1 1/3 3  1 12 2 2 3 3 11 1/4 1/24 1 32 1/3 11 1/4 1/54 1 1/25 2 11 3 1/31/3 1 1/73 7 11 1/3 53 1 71/5 1/7 11 1 71 1 71/7 1/7 11 7 91/7 1 11/9 1 1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 数学建模 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> matlab </tag>
            
            <tag> 数学评价模型 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Matlab串联矩阵函数【horzcat】详细解析</title>
      <link href="/2020/12/07/the-series-matrix-function-horzcat/"/>
      <url>/2020/12/07/the-series-matrix-function-horzcat/</url>
      
        <content type="html"><![CDATA[<h1 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h1><pre class="line-numbers language-bash"><code class="language-bash">C <span class="token operator">=</span> horzcat<span class="token punctuation">(</span>A,B<span class="token punctuation">)</span>C <span class="token operator">=</span> horzcat<span class="token punctuation">(</span>A1,A2,…,An<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h1 id="输入参数"><a href="#输入参数" class="headerlink" title="输入参数"></a>输入参数</h1><h2 id="A-第一个输入"><a href="#A-第一个输入" class="headerlink" title="A - 第一个输入"></a>A - 第一个输入</h2><p>标量 | 向量 | 矩阵 | 多维数组 | 表 | 时间表<br><strong>第一个输入，指定为标量、向量、矩阵、多维数组、表或时间表。</strong></p><h2 id="B-第二个输入"><a href="#B-第二个输入" class="headerlink" title="B - 第二个输入"></a>B - 第二个输入</h2><p>标量 | 向量 | 矩阵 | 多维数组 | 表 | 时间表<br><strong>第二个输入，指定为标量、向量、矩阵、多维数组、表或时间表。</strong></p><p>B 的元素沿第二个维度串联到第一个输入的末尾。输入参数的大小必须兼容。例如，如果第一个输入是大小为 3×2 的矩阵，则 B 必须有 3 行。</p><p>所有表输入必须有唯一的变量名称。如果有行名称，则它们必须完全相同（顺序除外）。</p><p>所有时间表输入必须具有相同的行时间，且每个列必须具有不同名称。</p><h2 id="A1-A2-…-An-输入列表"><a href="#A1-A2-…-An-输入列表" class="headerlink" title="A1,A2,…,An - 输入列表"></a>A1,A2,…,An - 输入列表</h2><p>逗号分隔的列表</p><p><strong>输入的列表，指定为以逗号分隔的列表，列表元素将按其在列表中的顺序串联。</strong></p><p>输入必须具有兼容的大小。例如，如果 A1 是长度为 m 的列向量，则其余输入必须各有 m 行才能水平串联。</p><p>所有表输入必须有唯一的变量名称。如果有行名称，则它们必须完全相同（顺序除外）。</p><p>所有时间表输入必须具有相同的行时间，且每个列必须具有不同名称。</p><h1 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h1><p>当 A 和 B 具有兼容的大小时（除第二个维度以外，其余维度的长度均需匹配），<code>C = horzcat(A,B)</code> 将 B 水平串联到 A 的末尾。</p><p><code>C = horzcat(A1,A2,…,An)</code> 水平串联 A1、A2、…、An。</p><p>horzcat 等效于使用方括号水平串联数组。例如，当 A 和 B 是兼容数组时，[A,B] 或 [A B] 等于 horzcat(A,B)。</p><h1 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h1><h2 id="两个矩阵"><a href="#两个矩阵" class="headerlink" title="两个矩阵"></a>两个矩阵</h2><p>创建两个矩阵并水平串联它们 - 首先使用方括号表示法串联，然后使用 horzcat 串联。</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token operator">>></span> A<span class="token operator">=</span>magic<span class="token punctuation">(</span>5<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">>></span> A<span class="token punctuation">(</span>4:5,:<span class="token punctuation">)</span><span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>A <span class="token operator">=</span>    17    24     1     8    15    23     5     7    14    16     4     6    13    20    22<span class="token operator">>></span> B<span class="token operator">=</span>magic<span class="token punctuation">(</span>3<span class="token punctuation">)</span>*100B <span class="token operator">=</span>   800   100   600   300   500   700   400   900   200<span class="token operator">>></span> C<span class="token operator">=</span><span class="token punctuation">[</span>A,B<span class="token punctuation">]</span>C <span class="token operator">=</span>    17    24     1     8    15   800   100   600    23     5     7    14    16   300   500   700     4     6    13    20    22   400   900   200<span class="token operator">>></span> D <span class="token operator">=</span> horzcat<span class="token punctuation">(</span>A,B<span class="token punctuation">)</span>D <span class="token operator">=</span>    17    24     1     8    15   800   100   600    23     5     7    14    16   300   500   700     4     6    13    20    22   400   900   200<span class="token operator">>></span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="两个表"><a href="#两个表" class="headerlink" title="两个表"></a>两个表</h2><p>创建一个带有三行和两个变量的表 A。</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token operator">>></span> A <span class="token operator">=</span> table<span class="token punctuation">(</span><span class="token punctuation">[</span>5<span class="token punctuation">;</span>6<span class="token punctuation">;</span>5<span class="token punctuation">]</span>,<span class="token punctuation">[</span><span class="token string">'M'</span><span class="token punctuation">;</span><span class="token string">'M'</span><span class="token punctuation">;</span><span class="token string">'M'</span><span class="token punctuation">]</span>,<span class="token punctuation">..</span>.    <span class="token string">'VariableNames'</span>,<span class="token punctuation">{</span><span class="token string">'Age'</span> <span class="token string">'Gender'</span><span class="token punctuation">}</span>,<span class="token punctuation">..</span>.    <span class="token string">'RowNames'</span>,<span class="token punctuation">{</span><span class="token string">'Thomas'</span> <span class="token string">'Gordon'</span> <span class="token string">'Percy'</span><span class="token punctuation">}</span><span class="token punctuation">)</span>A<span class="token operator">=</span>3×2 table              Age    Gender              ___    ______    Thomas     5       M       Gordon     6       M       Percy      5       M   <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>创建一个带有三行和三个变量的表 B。</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token operator">>></span> B <span class="token operator">=</span> table<span class="token punctuation">(</span><span class="token punctuation">[</span>45<span class="token punctuation">;</span>41<span class="token punctuation">;</span>40<span class="token punctuation">]</span>,<span class="token punctuation">[</span>45<span class="token punctuation">;</span>32<span class="token punctuation">;</span>34<span class="token punctuation">]</span>,<span class="token punctuation">{</span><span class="token string">'NY'</span><span class="token punctuation">;</span><span class="token string">'CA'</span><span class="token punctuation">;</span><span class="token string">'MA'</span><span class="token punctuation">}</span>,<span class="token punctuation">..</span>.    <span class="token string">'VariableNames'</span>,<span class="token punctuation">{</span><span class="token string">'Height'</span> <span class="token string">'Weight'</span> <span class="token string">'Birthplace'</span><span class="token punctuation">}</span>,<span class="token punctuation">..</span>.    <span class="token string">'RowNames'</span>,<span class="token punctuation">{</span><span class="token string">'Percy'</span> <span class="token string">'Gordon'</span> <span class="token string">'Thomas'</span><span class="token punctuation">}</span><span class="token punctuation">)</span>B<span class="token operator">=</span>3×3 table              Height    Weight    Birthplace              ______    ______    __________    Percy       45        45        <span class="token punctuation">{</span><span class="token string">'NY'</span><span class="token punctuation">}</span>      Gordon      41        32        <span class="token punctuation">{</span><span class="token string">'CA'</span><span class="token punctuation">}</span>      Thomas      40        34        <span class="token punctuation">{</span><span class="token string">'MA'</span><span class="token punctuation">}</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后水平串联 A 和 B。C 中的行顺序与 A 中的顺序相匹配。</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token operator">>></span> C <span class="token operator">=</span> horzcat<span class="token punctuation">(</span>A,B<span class="token punctuation">)</span>C<span class="token operator">=</span>3×5 table              Age    Gender    Height    Weight    Birthplace              ___    ______    ______    ______    __________    Thomas     5       M         40        34        <span class="token punctuation">{</span><span class="token string">'MA'</span><span class="token punctuation">}</span>      Gordon     6       M         41        32        <span class="token punctuation">{</span><span class="token string">'CA'</span><span class="token punctuation">}</span>      Percy      5       M         45        45        <span class="token punctuation">{</span><span class="token string">'NY'</span><span class="token punctuation">}</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="具有不同类型的日期"><a href="#具有不同类型的日期" class="headerlink" title="具有不同类型的日期"></a>具有不同类型的日期</h2><p>将日期字符向量、字符串日期和日期时间串联成一个日期行。结果是一个日期时间行向量。</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token operator">>></span> chardate <span class="token operator">=</span> <span class="token string">'2020-03-24'</span><span class="token punctuation">;</span><span class="token operator">>></span> strdate <span class="token operator">=</span> <span class="token string">"2020-04-19"</span><span class="token punctuation">;</span><span class="token operator">>></span> t <span class="token operator">=</span> datetime<span class="token punctuation">(</span><span class="token string">'2020-05-10'</span>,<span class="token string">'InputFormat'</span>,<span class="token string">'yyyy-MM-dd'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">>></span> C <span class="token operator">=</span> horzcat<span class="token punctuation">(</span>chardate,strdate,t<span class="token punctuation">)</span>C <span class="token operator">=</span> 1x3 datetime   24-Mar-2020   19-Apr-2020   10-May-2020<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="字符串数组"><a href="#字符串数组" class="headerlink" title="字符串数组"></a>字符串数组</h2><p>将三个字符串数组串联成一个数组。</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token operator">>></span> A1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"str1"</span><span class="token punctuation">;</span> <span class="token string">"str2"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token operator">>></span> A2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"str3"</span><span class="token punctuation">;</span> <span class="token string">"str4"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token operator">>></span> A3 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"str5"</span><span class="token punctuation">;</span> <span class="token string">"str6"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token operator">>></span> C <span class="token operator">=</span> horzcat<span class="token punctuation">(</span>A1,A2,A3<span class="token punctuation">)</span>C <span class="token operator">=</span> 2x3 string    <span class="token string">"str1"</span>    <span class="token string">"str3"</span>    <span class="token string">"str5"</span>    <span class="token string">"str2"</span>    <span class="token string">"str4"</span>    <span class="token string">"str6"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="元胞数组中的矩阵"><a href="#元胞数组中的矩阵" class="headerlink" title="元胞数组中的矩阵"></a>元胞数组中的矩阵</h2><p>创建一个包含两个矩阵的元胞数组。将元胞数组中的矩阵水平串联成一个矩阵。</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token operator">>></span> M1 <span class="token operator">=</span> <span class="token punctuation">[</span>1 2<span class="token punctuation">;</span> 3 4<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token operator">>></span> M2 <span class="token operator">=</span> <span class="token punctuation">[</span>5 6 7<span class="token punctuation">;</span> 8 9 10<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token operator">>></span> A1 <span class="token operator">=</span> <span class="token punctuation">{</span>M1,M2<span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token operator">>></span> C <span class="token operator">=</span> horzcat<span class="token punctuation">(</span>A1<span class="token punctuation">{</span>:<span class="token punctuation">}</span><span class="token punctuation">)</span>C <span class="token operator">=</span> 2×5     1     2     5     6     7     3     4     8     9    10<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h1><p>要通过<strong>水平串联字符串、字符向量或字符向量元胞数组来构造文本</strong>，请使用 <code>strcat</code> 函数。</p><p>要<strong>从字符向量元胞数组或字符串数组构造一段带分隔符的文本</strong>，请使用 <code>strjoin</code> 函数。</p><h1 id="资源传送门"><a href="#资源传送门" class="headerlink" title="资源传送门"></a>资源传送门</h1><ol><li>关注【==做一个柔情的程序猿==】公众号</li><li>在【==做一个柔情的程序猿==】公众号后台回复 【<strong>python资料</strong>】【<strong>2020秋招</strong>】 即可获取相应的惊喜哦！</li><li><h1 id="「❤️-感谢大家」"><a href="#「❤️-感谢大家」" class="headerlink" title="「❤️ 感谢大家」"></a>「❤️ 感谢大家」</h1></li><li>点赞支持下吧，让更多的人也能看到这篇内容（收藏不点赞，都是耍流氓 -_-）</li><li>欢迎在留言区与我分享你的想法，也欢迎你在留言区记录你的思考过程。</li></ol>]]></content>
      
      
      <categories>
          
          <category> matlab </category>
          
      </categories>
      
      
        <tags>
            
            <tag> matlab </tag>
            
            <tag> 函数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据分析模型（二）：模糊聚类分析方法及实例（附完整代码）</title>
      <link href="/2020/12/05/fuzzy-cluster-analysis/"/>
      <url>/2020/12/05/fuzzy-cluster-analysis/</url>
      
        <content type="html"><![CDATA[<p>聚类分析是数据挖掘技术中的一种重要的方法，可以作为一个独立的工具来获得数据分布情况，它广泛地应用于<strong>模式识别、数据分析、图像处理、生物学、经济学</strong>等许多领域。</p><p>聚类分析方法是数理统计中研究“==物以类聚==”的一种多元分析方法，及用数学定量地确定样品的亲疏关系，从而客观地分型化类。由于事物本身在很多情况下都带有模糊性，因此把模糊数学方法引入聚类分析，能使分类更切合实际。我们所应用的模糊聚类方法是基于模糊相似关系上的模糊聚类法，又称==系统聚类法==。</p><h1 id="模糊聚类分析基本知识"><a href="#模糊聚类分析基本知识" class="headerlink" title="模糊聚类分析基本知识"></a>模糊聚类分析基本知识</h1><h2 id="1-普通等价关系"><a href="#1-普通等价关系" class="headerlink" title="1. 普通等价关系"></a>1. 普通等价关系</h2><p><strong>（1）自反性</strong><br>对任意<img src="https://img-blog.csdnimg.cn/20200503094146607.png" alt>，都有<img src="https://img-blog.csdnimg.cn/20200503094200203.png" alt>（即任何元素的自身和自身有这种关系），则称R是自反关系。相应的矩阵称自反矩阵。<br><strong>（2）对称性</strong><br>如果从<img src="https://img-blog.csdnimg.cn/20200503094225686.png" alt>可以推出<img src="https://img-blog.csdnimg.cn/20200503094237848.png" alt>（即若<img src="https://img-blog.csdnimg.cn/20200503094253823.png" alt>有这种关系，则<img src="https://img-blog.csdnimg.cn/20200503094308104.png" alt>也有这种关系），则称R是对称关系。相应的矩阵称为对称矩阵。<br>例如，朋友是对称关系。父子则不是对称关系。<br><strong>（３）传递性</strong><br>如果<img src="https://img-blog.csdnimg.cn/20200503094338355.png" alt>可以推出<img src="https://img-blog.csdnimg.cn/20200503094350947.png" alt>（即若u和v有这种关系，v和w有这种关系，u和w则必有这种关系），则称R是传递关系。相应的矩阵称传递矩阵。</p><p><strong>相似关系：具有自反性和对称性的关系称为相似关系。<br>等价关系：具有自反性、对称性和传递性的关系称为等价性。</strong></p><h2 id="2-模糊等价关系"><a href="#2-模糊等价关系" class="headerlink" title="2. 模糊等价关系"></a>2. 模糊等价关系</h2><p>设论域U为有限集合，U上的一个模糊关系R，与其对应的模糊矩阵<img src="https://img-blog.csdnimg.cn/20200503094519267.png" alt>若满足：<br>自反性：<img src="https://img-blog.csdnimg.cn/20200503094531312.png" alt></p><p>对称性：<img src="https://img-blog.csdnimg.cn/2020050309453962.png" alt></p><p>传递性：<img src="https://img-blog.csdnimg.cn/20200503094544877.png" alt></p><p>则称n是一个模糊等价矩阵，其关系是模糊等价关系。<br>若<img src="https://img-blog.csdnimg.cn/2020050309460354.png" alt>只满足自反性和对称性，则称为相似关系。</p><h1 id="相关定理"><a href="#相关定理" class="headerlink" title="相关定理"></a>相关定理</h1><p><strong>定理1</strong>  设R是<img src="https://img-blog.csdnimg.cn/20200503094655826.png" alt>上的一个自反、对称关系，即R是n阶模糊相似矩阵，则存在一个最小的自然数<img src="https://img-blog.csdnimg.cn/20200503094716636.png" alt>，使得<img src="https://img-blog.csdnimg.cn/20200503094727845.png" alt>为模糊等价矩阵，且对于一切大于k的自然数w，恒有<img src="https://img-blog.csdnimg.cn/20200503094750558.png" alt>。<img src="https://img-blog.csdnimg.cn/20200503094802206.png" alt>称为R的传递闭包矩阵，记为<img src="https://img-blog.csdnimg.cn/20200503094814304.png" alt>。</p><p><strong>定理2</strong>  如果模糊关系矩阵R是模糊等价关系，则对于任意<img src="https://img-blog.csdnimg.cn/20200503094849389.png" alt>，所得的λ截矩阵<img src="https://img-blog.csdnimg.cn/20200503095004541.png" alt>也是等价关系。<br>根据这个定理，在模糊关系R确定之后，对给定的数<img src="https://img-blog.csdnimg.cn/20200503095033698.png" alt>，便可得到一个相应的普通等价关系<img src="https://img-blog.csdnimg.cn/20200503095043887.png" alt>，可以决定一个λ水平分类。</p><p><strong>定理3</strong>  如果<img src="https://img-blog.csdnimg.cn/20200503095104718.png" alt>，则<img src="https://img-blog.csdnimg.cn/20200503095118112.png" alt>所分出的每一类必是<img src="https://img-blog.csdnimg.cn/20200503095126706.png" alt>的某一类的子类。称<img src="https://img-blog.csdnimg.cn/20200503095137659.png" alt>分类法是<img src="https://img-blog.csdnimg.cn/20200503095147371.png" alt>分类法的细化。</p><p>根据上述3个定理，可以进行聚类分析操作，例如，当所给矩阵关系是相似关系，由定理1可知，自乘若干次后，就可以获得等价关系矩阵，然后再由定理2和定理3进行聚类。</p><h1 id="模糊聚类分析步骤"><a href="#模糊聚类分析步骤" class="headerlink" title="模糊聚类分析步骤"></a>模糊聚类分析步骤</h1><p>模糊聚类分析步骤可以概括为：<strong>==数据标准化，建立模糊相似矩阵，聚类==</strong>。</p><h1 id="模糊等价矩阵聚类"><a href="#模糊等价矩阵聚类" class="headerlink" title="模糊等价矩阵聚类"></a>模糊等价矩阵聚类</h1><h2 id="（1）传递闭包法"><a href="#（1）传递闭包法" class="headerlink" title="（1）传递闭包法"></a>（1）传递闭包法</h2><p>根据标定所建立的模糊矩阵R，一般说来似具有自反性和对称性，不满足传递性，只是模糊相似矩阵，只有当R是模糊等价矩阵时才能聚类，故需要将R改造成模糊等价矩阵。可以通过求传递包将n阶模糊相似矩阵R改造成n阶模糊等价矩阵t（R）。从模糊矩阵R出发，依次求平方：<img src="https://img-blog.csdnimg.cn/20200503095814480.png" alt>，当第一次出现<img src="https://img-blog.csdnimg.cn/20200503095828465.png" alt>时，表明<img src="https://img-blog.csdnimg.cn/20200503095836432.png" alt>已经具有传递性，<img src="https://img-blog.csdnimg.cn/20200503095908503.png" alt>就是所求的传递闭包t（R）。</p><p>在R改造成模糊等价矩阵<img src="https://img-blog.csdnimg.cn/20200503100025132.png" alt>之后进行截运算，即<img src="https://img-blog.csdnimg.cn/2020050310004179.png" alt>，可以获得所需分类。<br>从上述分析可知，λ从大到小分类从细到粗，是一个动态过程。<br>当n较大时，求传递闭包法的运算量比较大，不适于手工分类，便于计算机程序设计。</p><h2 id="（2）最大树法"><a href="#（2）最大树法" class="headerlink" title="（2）最大树法"></a>（2）最大树法</h2><p>在被分类的元素比较多时，要把所建立的模糊相似关系“改造”成模糊等值关系是相当麻烦的，比较简便的方法是——最大树法。<br>最大树法进行模糊聚类分析的步骤如下：在模糊相似关系矩阵<img src="https://img-blog.csdnimg.cn/20200503100131515.png" alt>中，按<img src="https://img-blog.csdnimg.cn/2020050310014411.png" alt>的大小顺序依次用直线将元素连接起来，并标上权重（<img src="https://img-blog.csdnimg.cn/20200503100156524.png" alt>的数值）。如果在某一步使图中出现了回路，就不画这一步，依次走下一步，直到所有元素连通为止。这样就得到了一棵所谓的最大树（最大树不是唯一的，但不影响分类的结果）。然后，取定λ值，去掉权重低于λ的连线，即可将元素分类，互相连通的元素归为一类。</p><h2 id="（3）编网法"><a href="#（3）编网法" class="headerlink" title="（3）编网法"></a>（3）编网法</h2><p>先取定λ，作截矩阵<img src="https://img-blog.csdnimg.cn/20200503100340180.png" alt>，并将<img src="https://img-blog.csdnimg.cn/20200503100347908.png" alt>的主对角线上填入元素的符号。在主对角线下方，以节点号代替<img src="https://img-blog.csdnimg.cn/20200503100511230.png" alt>中的“1”，而“0”则略去不写。由节点“*”向主对角线上引经线（竖线）和纬线（横线）。所谓编网，就是在结点处将经过的经纬线捆绑起来，这样来实现分类。通过打结而能互相联结的点属于同一类。</p><h1 id="系统聚类法"><a href="#系统聚类法" class="headerlink" title="系统聚类法"></a>系统聚类法</h1><p>在平面上有 7 个点w1,w2,w3,…,w7（如图 1（a）），可以用聚类图（如图 1（b））来表示聚类结果。<br><img src="https://img-blog.csdnimg.cn/20200503102459346.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3l3c3lkd3Nibg==,size_16,color_FFFFFF,t_70" alt></p><p><img src="https://img-blog.csdnimg.cn/20200503102436316.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3l3c3lkd3Nibg==,size_16,color_FFFFFF,t_70" alt><br>怎样才能生成这样的聚类图呢？步骤如下：设Ω ={w1,w2,…,w7}，<br>1）计算 n 个样本点两两之间的距离{dij} ，记为矩阵<br><img src="https://img-blog.csdnimg.cn/20200503102716543.png" alt></p><p>2）首先构造 n 个类，每一个类中只包含一个样本点，每一类的平台高度均为零；<br>3）合并距离最近的两类为新类，并且以这两类间的距离值作为聚类图中的平台高<br>度；<br>4）计算新类与当前各类的距离，若类的个数已经等于 1，转入步骤 5），否则，回到步骤 3）；<br>5）画聚类图；<br>6）决定类的个数和类。<br>显而易见，这种系统归类过程与计算类和类之间的距离有关，采用不同的距离定义，有可能得出不同的聚类结果。</p><h1 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h1><p>设有5个销售员w1,w2,w3,w4,w5 ，他们的销售业绩由二维变量 （v1,v2）描述，见表 1。<br><img src="https://img-blog.csdnimg.cn/20200503103028700.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3l3c3lkd3Nibg==,size_16,color_FFFFFF,t_70" alt><br>记销售员 wi(i=1,2,3,4,5)的销售业绩为(vi1,vi2) 。如果使用绝对值距离来测量点与点之间的距离，使用最短距离法来测量类与类之间的距离，即<br><img src="https://img-blog.csdnimg.cn/20200503103152701.png" alt><br>由距离公式d(.,.)，可以算出距离矩阵。<br><img src="https://img-blog.csdnimg.cn/20200503103247213.png" alt><br><img src="https://img-blog.csdnimg.cn/20200503103310906.png" alt><br><img src="https://img-blog.csdnimg.cn/20200503103328450.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3l3c3lkd3Nibg==,size_16,color_FFFFFF,t_70" alt><br>这样，h9已把所有的样本点聚为一类，因此，可以转到画聚类图步骤。画出聚类图（如图 2（a））。这是一颗二叉树，如图 2（b）。<br>有了聚类图，就可以按要求进行分类。可以看出，在这五个推销员中w5的工作成绩最佳，w3,w4 的工作成绩较好，而w1,w2 的工作成绩较差。<br>完全类似于以上步骤，但以最长距离法来计算类间距离，就称为系统聚类法中的最长距离法。</p><h1 id="matlab代码详解"><a href="#matlab代码详解" class="headerlink" title="matlab代码详解"></a>matlab代码详解</h1><pre class="line-numbers language-bash"><code class="language-bash">clc,cleara<span class="token operator">=</span><span class="token punctuation">[</span>1,0<span class="token punctuation">;</span>1,1<span class="token punctuation">;</span>3,2<span class="token punctuation">;</span>4,3<span class="token punctuation">;</span>2,5<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">[</span>m,n<span class="token punctuation">]</span><span class="token operator">=</span>size<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>d<span class="token operator">=</span>zeros<span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> i<span class="token operator">=</span>1:m<span class="token keyword">for</span> j<span class="token operator">=</span>i+1:md<span class="token punctuation">(</span>i,j<span class="token punctuation">)</span><span class="token operator">=</span>mandist<span class="token punctuation">(</span>a<span class="token punctuation">(</span>i,:<span class="token punctuation">)</span>,a<span class="token punctuation">(</span>j,:<span class="token punctuation">)</span><span class="token string">');%求第一个矩阵的行向量与第二个矩阵的列向量之间对应的绝对值距离endenddnd=nonzeros(d); %去掉d中的零元素，非零元素按列排列nd=union(nd,nd) %去掉重复的非零元素for i=1:m-1nd_min=min(nd);[row,col]=find(d==nd_min);tm=union(row,col); %row和col归为一类tm=reshape(tm,1,length(tm)); %把数组tm变成行向量fprintf('</span>第%d次合成，平台高度为%d时的分类结果为：%s\n',<span class="token punctuation">..</span>.i,nd_min,int2str<span class="token punctuation">(</span>tm<span class="token punctuation">))</span><span class="token punctuation">;</span>nd<span class="token punctuation">(</span>find<span class="token punctuation">(</span>nd<span class="token operator">==</span>nd_min<span class="token punctuation">))</span><span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> %删除已经归类的元素<span class="token keyword">if</span> length<span class="token punctuation">(</span>nd<span class="token punctuation">)</span><span class="token operator">==</span>0<span class="token keyword">break</span>endend<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果如下：<br><img src="https://img-blog.csdnimg.cn/20200503104056646.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3l3c3lkd3Nibg==,size_16,color_FFFFFF,t_70" alt><br>或者使用MATLAB统计工具箱的相关命令，编写如下程序：</p><pre class="line-numbers language-bash"><code class="language-bash">clc,cleara<span class="token operator">=</span><span class="token punctuation">[</span>1,0<span class="token punctuation">;</span>1,1<span class="token punctuation">;</span>3,2<span class="token punctuation">;</span>4,3<span class="token punctuation">;</span>2,5<span class="token punctuation">]</span><span class="token punctuation">;</span>y<span class="token operator">=</span>pdist<span class="token punctuation">(</span>a,<span class="token string">'cityblock'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> %求a的两两行向量间的绝对值距离yc<span class="token operator">=</span>squareform<span class="token punctuation">(</span>y<span class="token punctuation">)</span> %变换成距离方阵z<span class="token operator">=</span>linkage<span class="token punctuation">(</span>y<span class="token punctuation">)</span> %产生等级聚类树<span class="token punctuation">[</span>h,t<span class="token punctuation">]</span><span class="token operator">=</span>dendrogram<span class="token punctuation">(</span>z<span class="token punctuation">)</span> %画聚类图T<span class="token operator">=</span>cluster<span class="token punctuation">(</span>z,<span class="token string">'maxclust'</span>,3<span class="token punctuation">)</span> %把对象划分成3类<span class="token keyword">for</span> i<span class="token operator">=</span>1:3tm<span class="token operator">=</span>find<span class="token punctuation">(</span>T<span class="token operator">==</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span> %求第i类的对象tm<span class="token operator">=</span>reshape<span class="token punctuation">(</span>tm,1,length<span class="token punctuation">(</span>tm<span class="token punctuation">))</span><span class="token punctuation">;</span> %变成行向量fprintf<span class="token punctuation">(</span><span class="token string">'第%d类的有%s\n'</span>,i,int2str<span class="token punctuation">(</span>tm<span class="token punctuation">))</span><span class="token punctuation">;</span> %显示分类结果end<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果：<br><img src="https://img-blog.csdnimg.cn/20200503104238600.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3l3c3lkd3Nibg==,size_16,color_FFFFFF,t_70" alt><br><img src="https://img-blog.csdnimg.cn/20200503104251606.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3l3c3lkd3Nibg==,size_16,color_FFFFFF,t_70" alt><br>聚类图：<br><img src="https://img-blog.csdnimg.cn/20200503104310537.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3l3c3lkd3Nibg==,size_16,color_FFFFFF,t_70" alt></p><blockquote><p><strong>接下的博文将对代码里面相关的命令进行详解，请大家持续关注！！！</strong><br><img src="https://img-blog.csdnimg.cn/20200503104718800.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3l3c3lkd3Nibg==,size_16,color_FFFFFF,t_70#pic_center" alt></p></blockquote><p><strong>都看到这里了各位老铁就点个赞再走呗，来个关注也行，能够让更多的人看到这篇文章，有问题欢迎各位指导批评！！！！</strong></p><p><strong>都看到这里了各位老铁就点个赞再走呗，来个关注也行，能够让更多的人看到这篇文章，有问题欢迎各位指导批评！！！！</strong></p><p><strong>都看到这里了各位老铁就点个赞再走呗，来个关注也行，能够让更多的人看到这篇文章，有问题欢迎各位指导批评！！！！</strong></p><blockquote><p>未经本人允许不得转载</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 数学建模 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数学分析模型 </tag>
            
            <tag> matlab </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>教你在python中用不同的方式画不同颜色的画布</title>
      <link href="/2020/12/05/different-color-canvas/"/>
      <url>/2020/12/05/different-color-canvas/</url>
      
        <content type="html"><![CDATA[<h1 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h1><p>在这篇文章中将给大家讲解如何分别用<code>numpy</code>的方法，与<code>numpy与cv2结合</code>的方法创建空白画布，创建白色画布，与创建彩色画布。在讲解过程中还会介绍<code>cv2</code>进行通道分割<code>cv2.split</code>与通道合并<code>cv2.merge</code>的两个函数的具体使用以及深究numpy的ndarray数据结构的索引与赋值。</p><h1 id="numpy的ndarray数据结构的索引与赋值"><a href="#numpy的ndarray数据结构的索引与赋值" class="headerlink" title="numpy的ndarray数据结构的索引与赋值"></a>numpy的ndarray数据结构的索引与赋值</h1><p>在使用画图工具的时候, 第一件事情就是创建一个新的空白画布，我们可以指定画布的大小和颜色。</p><blockquote><p><strong>那我们如何使用opencv来创建一个空白的画布(值相同的图片) ?</strong></p></blockquote><p><strong>其实image的数据结构上的图片，本质上就是<code>numpy</code>里面的<code>ndarray的对象</code>，创建一个画布本质上就是创建一个同等规格的<code>ndarray</code>。</strong></p><p>创建一个新的特定尺寸的<code>ndarray</code>我们可以使用<code>np.zeors</code> 函数，我们将图像的高度(height)，图像的宽度(width)，以及图像的通道数<code>channel</code> 以<code>tuple 类型</code>传入<code>np.zeros</code>。<strong>再次声明是tuple类型</strong>。</p><p>另外由于不是所有的<code>numpy</code>类型的数值，都可以放到opencv中进行图像处理.</p><p>数值取值范围在<code>0-255</code>， 我们需要指定数据类型为<code>uint8</code> unsigned integer 8-bit</p><pre class="line-numbers language-python"><code class="language-python">np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token punctuation">(</span>height<span class="token punctuation">,</span> width<span class="token punctuation">,</span> channels<span class="token punctuation">)</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span><span class="token string">"uint8"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>举个例子：想创建一个800 x 600 x 3 的图片，一个BGR格式的图像，我们就得这么写：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 初始化一个空画布 300×300 三通道 背景色为黑色 </span>canvas_black <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">600</span><span class="token punctuation">,</span> <span class="token number">800</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span><span class="token string">"uint8"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>得到的效果如下：</p><p><img src="https://img-blog.csdnimg.cn/20201006200546404.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3l3c3lkd3Nibg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><blockquote><p>注意： height写在前面<br> <strong>为什么Height写在前面？</strong><br> 就得知道opencv图像的数据结构是numpy，Image的属性,其实就是numpy的ndarray数据格式的属性。</p><p>我们可以直接获取img对象的诸多属性，例如我们打印lena图的属性，具体如下：</p></blockquote><p><img src="https://img-blog.csdnimg.cn/20201006195435156.jpg#pic_center" alt="在这里插入图片描述"></p><pre class="line-numbers language-python"><code class="language-python"> <span class="token comment" spellcheck="true"># -*- coding: utf-8 -*- </span><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> cv2<span class="token comment" spellcheck="true"># 导入一张图像 模式为彩色图片</span>img <span class="token operator">=</span> cv2<span class="token punctuation">.</span>imread<span class="token punctuation">(</span><span class="token string">'lena.jpg'</span><span class="token punctuation">,</span> cv2<span class="token punctuation">.</span>IMREAD_COLOR<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"================打印图像的属性================"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"图像对象的类型 {}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>type<span class="token punctuation">(</span>img<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>img<span class="token punctuation">.</span>shape<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"图像宽度: {} pixels"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>img<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"图像高度: {} pixels"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>img<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"通道: {}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>img<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"图像分辨率: {}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>img<span class="token punctuation">.</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"数据类型: {}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>img<span class="token punctuation">.</span>dtype<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>输出结果</strong>：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>打印图像的属性<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>图像对象的类型 <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'numpy.ndarray'</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">,</span> <span class="token number">256</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>图像宽度<span class="token punctuation">:</span> <span class="token number">256</span> pixels图像高度<span class="token punctuation">:</span> <span class="token number">256</span> pixels通道<span class="token punctuation">:</span> <span class="token number">3</span>图像分辨率<span class="token punctuation">:</span> <span class="token number">196608</span>数据类型<span class="token punctuation">:</span> uint8<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>有时候我们也可以偷懒，如果我们想创建与另外一个图像尺寸相同的画布的时候，我们可以使用<code>np.zeros_like</code></p><pre class="line-numbers language-python"><code class="language-python">canvas_black <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros_like<span class="token punctuation">(</span>img<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="创建空白画布"><a href="#创建空白画布" class="headerlink" title="创建空白画布"></a>创建空白画布</h1><p><strong>创建空白画布的函数</strong>如下：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">InitCanvas</span><span class="token punctuation">(</span>width<span class="token punctuation">,</span> height<span class="token punctuation">,</span> color<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    canvas <span class="token operator">=</span> np<span class="token punctuation">.</span>ones<span class="token punctuation">(</span><span class="token punctuation">(</span>height<span class="token punctuation">,</span> width<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span><span class="token string">"uint8"</span><span class="token punctuation">)</span>    canvas<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span> <span class="token operator">=</span> color    <span class="token keyword">return</span> canvas<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>调用的时候传入图像的宽度、高度和画布的颜色。例如创建一个800*600 颜色为纯黑色的画布：</p><pre class="line-numbers language-python"><code class="language-python">canvas <span class="token operator">=</span> InitCanvas<span class="token punctuation">(</span><span class="token number">800</span><span class="token punctuation">,</span> <span class="token number">600</span><span class="token punctuation">,</span> color<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">,</span><span class="token number">255</span><span class="token punctuation">,</span><span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>创建空白画布的完整代码</strong>如下：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token triple-quoted-string string">'''初始化画布'''</span><span class="token keyword">import</span> cv2<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">def</span> <span class="token function">init_canvas</span><span class="token punctuation">(</span>width<span class="token punctuation">,</span> height<span class="token punctuation">,</span> color<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    canvas <span class="token operator">=</span> np<span class="token punctuation">.</span>ones<span class="token punctuation">(</span><span class="token punctuation">(</span>height<span class="token punctuation">,</span> width<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span><span class="token string">"uint8"</span><span class="token punctuation">)</span>    canvas<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span> <span class="token operator">=</span> color    <span class="token keyword">return</span> canvascanvas <span class="token operator">=</span> init_canvas<span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> color<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">125</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">)</span>cv2<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span><span class="token string">'canvas'</span><span class="token punctuation">,</span> canvas<span class="token punctuation">)</span>cv2<span class="token punctuation">.</span>waitKey<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>cv2<span class="token punctuation">.</span>destroyAllWindows<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>效果展示：</strong></p><p><img src="https://img-blog.csdnimg.cn/20201006193553314.png#pic_center" alt="在这里插入图片描述"></p><h1 id="初始化白色的画布"><a href="#初始化白色的画布" class="headerlink" title="初始化白色的画布"></a>初始化白色的画布</h1><p>白色的画布， 因为比较简单，而且三个通道的值都相同。</p><blockquote><p>ps: 其实灰色的图片(GRAY2BGR)，三个通道的值都相同。</p></blockquote><p>那么我们创建一个全都是1的矩阵，然后乘上某个数值，问题是不是就解决了。</p><p>我们需要用到<code>np.ones</code> 函数</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 初始化一个空画布 300×300 三通道 背景色为白色 </span>canvas_white <span class="token operator">=</span> np<span class="token punctuation">.</span>ones<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span><span class="token string">"uint8"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>接下来, 需要乘上一个整数，255 (你可以填入0-255的任意值)</p><pre class="line-numbers language-python"><code class="language-python">canvas_white <span class="token operator">*=</span> <span class="token number">255</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这种运算称之为 <code>全局乘法</code> 。</p><p><strong>具体代码如下：</strong></p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> cv2<span class="token keyword">import</span> numpy <span class="token keyword">as</span> npcanvas_white <span class="token operator">=</span> np<span class="token punctuation">.</span>ones<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span><span class="token string">"uint8"</span><span class="token punctuation">)</span>canvas_white <span class="token operator">*=</span> <span class="token number">255</span>cv2<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span><span class="token string">'canvas'</span><span class="token punctuation">,</span> canvas_white<span class="token punctuation">)</span>cv2<span class="token punctuation">.</span>waitKey<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>cv2<span class="token punctuation">.</span>destroyAllWindows<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>创建的白色画布如下</strong>：</p><p><img src="https://img-blog.csdnimg.cn/20201006200648233.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3l3c3lkd3Nibg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h1 id="初始化彩色的画布"><a href="#初始化彩色的画布" class="headerlink" title="初始化彩色的画布"></a>初始化彩色的画布</h1><h2 id="利用cv2的内置方法merge与split"><a href="#利用cv2的内置方法merge与split" class="headerlink" title="利用cv2的内置方法merge与split"></a>利用cv2的内置方法merge与split</h2><p>我们初始化<code>BGR</code>的图片<code>canvas_white</code> 之后将原来的图片进行通道分离，之后分别乘上<code>BGR</code>三个通道的整数值，然后将三个通道合并在一起，就得到我们想要的彩图纯色背景。</p><p>那通道的分离我们需要用到的函数是<code>cv2.split(img)</code>.</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 将原来的三个通道抽离出来， 分别乘上各个通道的值</span><span class="token punctuation">(</span>channel_b<span class="token punctuation">,</span> channel_g<span class="token punctuation">,</span> channel_r<span class="token punctuation">)</span> <span class="token operator">=</span> cv2<span class="token punctuation">.</span>split<span class="token punctuation">(</span>canvas<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>channel_b 蓝色通道</strong>，<strong>channel_g 绿色通道</strong>，<strong>channel_r 红色通道</strong>，都是二维的ndarray对象。</p><p>我们指定一种颜色，例如 <code>color = (100, 20, 50))</code></p><blockquote><p>注意：我们这里的<strong>颜色指的BGR格式</strong></p><p>也就是</p><p>B -&gt; 100<br>G -&gt; 20<br>R -&gt; 50</p></blockquote><p>接下来我们分别将其乘上对应的值.</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 颜色的值与个通道的全1矩阵相乘</span>channel_b <span class="token operator">*=</span> color<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>channel_g <span class="token operator">*=</span> color<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>channel_r <span class="token operator">*=</span> color<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>接下来我们将三个通道重新合并，需要用到的函数是<code>cv2.merge</code></p><pre class="line-numbers language-python"><code class="language-python">cv2<span class="token punctuation">.</span>merge<span class="token punctuation">(</span><span class="token punctuation">[</span>channel_b<span class="token punctuation">,</span> channel_g<span class="token punctuation">,</span> channel_r<span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>注意：三个通道的矩阵以<code>list []</code> 的方式传入<code>merge</code>函数.</p></blockquote><p>综合起来，就是我们的第一个<strong>初始化彩色背景的函数</strong>：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 初始化一个彩色的画布 - cv2版本</span><span class="token keyword">def</span> <span class="token function">init_canvas</span><span class="token punctuation">(</span>width<span class="token punctuation">,</span> height<span class="token punctuation">,</span> color<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    canvas <span class="token operator">=</span> np<span class="token punctuation">.</span>ones<span class="token punctuation">(</span><span class="token punctuation">(</span>height<span class="token punctuation">,</span> width<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span><span class="token string">"uint8"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 将原来的三个通道抽离出来， 分别乘上各个通道的值</span>    <span class="token punctuation">(</span>channel_b<span class="token punctuation">,</span> channel_g<span class="token punctuation">,</span> channel_r<span class="token punctuation">)</span> <span class="token operator">=</span> cv2<span class="token punctuation">.</span>split<span class="token punctuation">(</span>canvas<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 颜色的值与个通道的全1矩阵相乘</span>    channel_b <span class="token operator">*=</span> color<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    channel_g <span class="token operator">*=</span> color<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>    channel_r <span class="token operator">*=</span> color<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true"># cv.merge 合并三个通道的值</span>    <span class="token keyword">return</span> cv2<span class="token punctuation">.</span>merge<span class="token punctuation">(</span><span class="token punctuation">[</span>channel_b<span class="token punctuation">,</span> channel_g<span class="token punctuation">,</span> channel_r<span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>具体实现代码如下：</strong></p><pre class="line-numbers language-python"><code class="language-python"><span class="token triple-quoted-string string">'''初始化画布'''</span><span class="token keyword">import</span> cv2<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token comment" spellcheck="true"># 初始化一个彩色的画布 - cv2版本</span><span class="token keyword">def</span> <span class="token function">init_canvas</span><span class="token punctuation">(</span>width<span class="token punctuation">,</span> height<span class="token punctuation">,</span> color<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    canvas <span class="token operator">=</span> np<span class="token punctuation">.</span>ones<span class="token punctuation">(</span><span class="token punctuation">(</span>height<span class="token punctuation">,</span> width<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span><span class="token string">"uint8"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 将原来的三个通道抽离出来， 分别乘上各个通道的值</span>    <span class="token punctuation">(</span>channel_b<span class="token punctuation">,</span> channel_g<span class="token punctuation">,</span> channel_r<span class="token punctuation">)</span> <span class="token operator">=</span> cv2<span class="token punctuation">.</span>split<span class="token punctuation">(</span>canvas<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 颜色的值与个通道的全1矩阵相乘</span>    channel_b <span class="token operator">*=</span> color<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    channel_g <span class="token operator">*=</span> color<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>    channel_r <span class="token operator">*=</span> color<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true"># cv.merge 合并三个通道的值</span>    <span class="token keyword">return</span> cv2<span class="token punctuation">.</span>merge<span class="token punctuation">(</span><span class="token punctuation">[</span>channel_b<span class="token punctuation">,</span> channel_g<span class="token punctuation">,</span> channel_r<span class="token punctuation">]</span><span class="token punctuation">)</span>canvas <span class="token operator">=</span> init_canvas<span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> color<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">125</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">)</span>cv2<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span><span class="token string">'canvas'</span><span class="token punctuation">,</span> canvas<span class="token punctuation">)</span>cv2<span class="token punctuation">.</span>waitKey<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>cv2<span class="token punctuation">.</span>destroyAllWindows<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>运行效果：</strong></p><p><img src="https://img-blog.csdnimg.cn/20201006204105226.png#pic_center" alt="在这里插入图片描述"></p><blockquote><p>注意：此函数使用 <code>cv2.split</code> 非常耗时 所以只有在需要的时候才能做到。 否则用Numpy索引。</p></blockquote><h2 id="利用numpy内置的索引"><a href="#利用numpy内置的索引" class="headerlink" title="利用numpy内置的索引"></a>利用numpy内置的索引</h2><p>使用numpy原生的方法， 性能会比opencv中的要好。我们直接使用<code>numpy的ndarray的索引</code>的方法。</p><p>例如 <code>canvas[:,:,0]</code> 选中的是所有行，所有列，像素元素的第一个值，也就是，所有B通道的值。</p><p>然后对其进行赋值：</p><pre class="line-numbers language-python"><code class="language-python">canvas<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> color<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>完整版本的函数如下，B/G/R通道分别进行赋值：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">init_canvas</span><span class="token punctuation">(</span>width<span class="token punctuation">,</span> height<span class="token punctuation">,</span> color<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    canvas <span class="token operator">=</span> np<span class="token punctuation">.</span>ones<span class="token punctuation">(</span><span class="token punctuation">(</span>height<span class="token punctuation">,</span> width<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span><span class="token string">"uint8"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># Blue </span>    canvas<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> color<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true"># Green</span>    canvas<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> color<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true"># Red</span>    canvas<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> color<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>    <span class="token keyword">return</span> canvas<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>具体实现代码如下：</strong></p><pre class="line-numbers language-python"><code class="language-python"><span class="token triple-quoted-string string">'''初始化画布'''</span><span class="token keyword">import</span> cv2<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">def</span> <span class="token function">init_canvas</span><span class="token punctuation">(</span>width<span class="token punctuation">,</span> height<span class="token punctuation">,</span> color<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    canvas <span class="token operator">=</span> np<span class="token punctuation">.</span>ones<span class="token punctuation">(</span><span class="token punctuation">(</span>height<span class="token punctuation">,</span> width<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span><span class="token string">"uint8"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># Blue </span>    canvas<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> color<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true"># Green</span>    canvas<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> color<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true"># Red</span>    canvas<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> color<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>    <span class="token keyword">return</span> canvascanvas <span class="token operator">=</span> init_canvas<span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> color<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">125</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">)</span>cv2<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span><span class="token string">'canvas'</span><span class="token punctuation">,</span> canvas<span class="token punctuation">)</span>cv2<span class="token punctuation">.</span>waitKey<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>cv2<span class="token punctuation">.</span>destroyAllWindows<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>运行实现的效果和第一种方法一样：</strong></p><p><img src="https://img-blog.csdnimg.cn/20201006204652418.png#pic_center" alt="在这里插入图片描述"></p><p>实际上我们还有更快的方法, 可以实现这个功能, 这就需要你熟练掌握Numpy的使用技巧.</p><p>我们可以直接赋值color</p><pre class="line-numbers language-python"><code class="language-python">canvas<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span> <span class="token operator">=</span> color<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>完整实现过程如下：</strong></p><pre class="line-numbers language-python"><code class="language-python"><span class="token triple-quoted-string string">'''初始化画布'''</span><span class="token keyword">import</span> cv2<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">def</span> <span class="token function">init_canvas</span><span class="token punctuation">(</span>width<span class="token punctuation">,</span> height<span class="token punctuation">,</span> color<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    canvas <span class="token operator">=</span> np<span class="token punctuation">.</span>ones<span class="token punctuation">(</span><span class="token punctuation">(</span>height<span class="token punctuation">,</span> width<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span><span class="token string">"uint8"</span><span class="token punctuation">)</span>    canvas<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span> <span class="token operator">=</span> color    <span class="token keyword">return</span> canvascanvas <span class="token operator">=</span> init_canvas<span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> color<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">125</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">)</span>cv2<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span><span class="token string">'canvas'</span><span class="token punctuation">,</span> canvas<span class="token punctuation">)</span>cv2<span class="token punctuation">.</span>waitKey<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>cv2<span class="token punctuation">.</span>destroyAllWindows<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>运行的效果：</strong></p><p><img src="https://img-blog.csdnimg.cn/20201006204920615.png#pic_center" alt="在这里插入图片描述"></p><h1 id="综合实验-初始化背景"><a href="#综合实验-初始化背景" class="headerlink" title="综合实验-初始化背景"></a>综合实验-初始化背景</h1><p>在这个综合实验里会分别用上述的方法，创建黑色背景，白色背景，彩色背景。</p><p><strong>具体代码如下：</strong></p><pre class="line-numbers language-python"><code class="language-python"><span class="token triple-quoted-string string">'''初始化一个空白的画布并指定画布的颜色'''</span><span class="token keyword">import</span> cv2<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token comment" spellcheck="true"># 初始化一个空画布 300×300 三通道 背景色为黑色 </span>canvas_black <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span><span class="token string">"uint8"</span><span class="token punctuation">)</span>cv2<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span><span class="token string">"canvas_black"</span><span class="token punctuation">,</span> canvas_black<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 初始化一个空画布 300×300 三通道 背景色为白色 </span>canvas_white <span class="token operator">=</span> np<span class="token punctuation">.</span>ones<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span><span class="token string">"uint8"</span><span class="token punctuation">)</span>canvas_white <span class="token operator">*=</span> <span class="token number">255</span>cv2<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span><span class="token string">"canvas_white"</span><span class="token punctuation">,</span> canvas_white<span class="token punctuation">)</span><span class="token triple-quoted-string string">'''初始化一个彩色的画布 - cv2版本此函数使用 cv2.split 非常耗时 所以只有在需要的时候才能做到。 否则用Numpy索引。'''</span><span class="token keyword">def</span> <span class="token function">InitCanvasV1</span><span class="token punctuation">(</span>width<span class="token punctuation">,</span> height<span class="token punctuation">,</span> color<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    canvas <span class="token operator">=</span> np<span class="token punctuation">.</span>ones<span class="token punctuation">(</span><span class="token punctuation">(</span>height<span class="token punctuation">,</span> width<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span><span class="token string">"uint8"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 将原来的三个通道抽离出来， 分别乘上各个通道的值</span>    <span class="token punctuation">(</span>channel_b<span class="token punctuation">,</span> channel_g<span class="token punctuation">,</span> channel_r<span class="token punctuation">)</span> <span class="token operator">=</span> cv2<span class="token punctuation">.</span>split<span class="token punctuation">(</span>canvas<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 颜色的值与个通道的全1矩阵相乘</span>    channel_b <span class="token operator">*=</span> color<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    channel_g <span class="token operator">*=</span> color<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>    channel_r <span class="token operator">*=</span> color<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true"># cv.merge 合并三个通道的值</span>    <span class="token keyword">return</span> cv2<span class="token punctuation">.</span>merge<span class="token punctuation">(</span><span class="token punctuation">[</span>channel_b<span class="token punctuation">,</span> channel_g<span class="token punctuation">,</span> channel_r<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">'''初始化一个彩色的画布 - numpy版本使用numpy的索引　赋值'''</span><span class="token keyword">def</span> <span class="token function">InitCanvasV2</span><span class="token punctuation">(</span>width<span class="token punctuation">,</span> height<span class="token punctuation">,</span> color<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    canvas <span class="token operator">=</span> np<span class="token punctuation">.</span>ones<span class="token punctuation">(</span><span class="token punctuation">(</span>height<span class="token punctuation">,</span> width<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span><span class="token string">"uint8"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># Blue </span>    canvas<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> color<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true"># Green</span>    canvas<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> color<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true"># Red</span>    canvas<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> color<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>    <span class="token keyword">return</span> canvas<span class="token triple-quoted-string string">'''初始化终极版本熟练掌握 numpy 才可以提高工作效率哦'''</span><span class="token keyword">def</span> <span class="token function">InitCanvasV3</span><span class="token punctuation">(</span>width<span class="token punctuation">,</span> height<span class="token punctuation">,</span> color<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    canvas <span class="token operator">=</span> np<span class="token punctuation">.</span>ones<span class="token punctuation">(</span><span class="token punctuation">(</span>height<span class="token punctuation">,</span> width<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span><span class="token string">"uint8"</span><span class="token punctuation">)</span>    canvas<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span> <span class="token operator">=</span> color    <span class="token keyword">return</span> canvas<span class="token comment" spellcheck="true"># 初始化一个彩色的画布</span>canvas_color <span class="token operator">=</span> InitCanvasV2<span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">,</span> color<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">)</span>cv2<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span><span class="token string">"canvas_color"</span><span class="token punctuation">,</span> canvas_color<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 等待e键按下 关闭所有窗口</span><span class="token keyword">while</span> cv2<span class="token punctuation">.</span>waitKey<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">!=</span> ord<span class="token punctuation">(</span><span class="token string">'e'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">continue</span>cv2<span class="token punctuation">.</span>destroyAllWindows<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>运行结果：</strong></p><p><img src="https://img-blog.csdnimg.cn/20201006205102788.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3l3c3lkd3Nibg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h1 id="资源传送门"><a href="#资源传送门" class="headerlink" title="资源传送门"></a>资源传送门</h1><ul><li>关注【<strong>做一个柔情的程序猿</strong>】公众号</li><li>在【<strong>做一个柔情的程序猿</strong>】公众号后台回复 【<strong>python资料</strong>】【<strong>2020秋招</strong>】 即可获取相应的惊喜哦！</li></ul><h1 id="「❤️-感谢大家」"><a href="#「❤️-感谢大家」" class="headerlink" title="「❤️ 感谢大家」"></a>「❤️ 感谢大家」</h1><ol><li><strong>点赞支持下吧，让更多的人也能看到这篇内容（收藏不点赞，都是耍流氓 -_-）</strong></li><li><strong>欢迎在留言区与我分享你的想法，也欢迎你在留言区记录你的思考过程。</strong></li></ol>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> numpy </tag>
            
            <tag> OpenCV </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>手把手教你进行pip换源</title>
      <link href="/2020/12/03/pip-change-source/"/>
      <url>/2020/12/03/pip-change-source/</url>
      
        <content type="html"><![CDATA[<h2 id="为什么要换源"><a href="#为什么要换源" class="headerlink" title="为什么要换源"></a>为什么要换源</h2><p>学习python，最重要的是我们需要的各样第三方资源包，比如爬虫，有<code>requests，xpath</code>，爬虫界的扛把子<code>Scrapy；Web有django，flask，restframework</code>；可视化pyQT有<code>PyQt5，PyQt5.QtWidgets，skimage，cv2</code>数据可视化届的扛把子<code>dlib，basemap，pyproj</code>，其他的比如<code>sys，os，datatime</code>等等，没有他们学习python是寸步难行，正常情况下大家都是通过在终端输入命令行<code>pip install xx</code>进行安装，但是我相信，以下这种情况大家肯定遇到过：</p><p><img src="https://img-blog.csdnimg.cn/20200316194419813.png" alt></p><p>可以看到，安装资源包的过程非常的慢，可能都是几KB/s，有时甚至是一百多B/s，但是正常的网速最起码有3-5M/s，这就比较不开心了，最恶心的是，安装的慢就算了，可能安装安装着，直接error了，嗯…哭吧</p><p><img src="https://img-blog.csdnimg.cn/20200316194520677.png" alt></p><p>还有一种情况是什么呢，就是这种，直接飘黄，警告，恶心吧。。。</p><p><img src="https://img-blog.csdnimg.cn/2020031619452719.png" alt></p><p><strong><em>为什么会造成这种情况呢？</em></strong></p><p>因为需要的获取的资源包，默认是直接从pypi官网获取的，而pypi是国外的网速就慢，再加上我们国家会限制一些国外不正常的网站，可能会存在误杀，所以，直接从pypi官网获取资源包的时候，难免会各种限速，尤其是安装大一点的资源包的时候，更凉。。。。。</p><h2 id="国内映像"><a href="#国内映像" class="headerlink" title="国内映像"></a>国内映像</h2><p>总有一些大佬，牛逼的人为我们指路，让我们少踩点坑。虽然官网的pypi下载速度慢，但是大佬们为了照顾我们的情绪，专门开发了国内站点，内容和官网的pypi一模一样，但是他的服务器在国内，而且速度非常快，只要我们将pip默认的下载源换成国内源，我们在pip安装时，就是从国内获取了，速度绝对杠杠的，而且包质量没问题，国内站点会隔一段时间同步一次，基本不用担心获取的包有问题，美滋滋，在这里先感谢各位大佬、大神。<br>  这里呢，我们把现有的国内源贴出来，如下图所示：</p><blockquote><p>这里是引用</p></blockquote><p><img src="https://img-blog.csdnimg.cn/2020031619472466.png" alt></p><h2 id="换源步骤"><a href="#换源步骤" class="headerlink" title="换源步骤"></a>换源步骤</h2><p>（1）首先，打开c盘，找到用户这个文件夹，找到对应你自己主机的文件夹，我的是如下图所示。<br><img src="https://img-blog.csdnimg.cn/20200316194831891.png" alt><br>（2）接着在文件夹下创建一个名为pip的文件夹，就像下图这样<br><img src="https://img-blog.csdnimg.cn/20200316194838851.png" alt><br>（3）然后进入这个文件夹，创建一个pip.ini文件<br><img src="https://img-blog.csdnimg.cn/20200316194845398.png" alt><br>（4）编辑文件，添加如下内容<br><img src="https://img-blog.csdnimg.cn/20200316194852623.png" alt><br>选择哪个源链接看自己的兴趣。。。。。我这选择豆瓣<br>（5）最后保存，重新打开cmd，再安装时，速度杠杠的。。。。。<br><img src="https://img-blog.csdnimg.cn/20200316194858861.png" alt><br>我还有一篇博文讲的是另外一种方法也可以达到这样的效果，见：</p><p><a href="https://blog.csdn.net/ywsydwsbn/article/details/104896612" target="_blank" rel="noopener">python快速安装资源包</a></p><p><strong><del>希望可以帮助到大家！！！！！！！</del></strong> </p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> pip </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python实现树莓派摄像头持续录像并传送到主机</title>
      <link href="/2020/12/03/raspberry-pi-camera/"/>
      <url>/2020/12/03/raspberry-pi-camera/</url>
      
        <content type="html"><![CDATA[<p>关于树莓派，想必从事嵌入式开发的开发者都有听过，树莓派原名为<code>Raspberry Pi</code>，也就是它的英文读法，树莓派诞生于英国，由“Raspberry Pi 基金会”这个慈善组织注册开发。埃•厄普顿就是该项目的头目。在2012年的3月，英国剑桥大学埃本•阿普顿（Eben Epton）正式发售世界上最小的台式机，又称卡片式电脑，外形只有信用卡大小，却具有电脑的所有基本功能，这就是Raspberry Pi电脑板，中文译名”树莓派”！</p><p>树莓派作为一个轻便迷你的小终端很受大众的喜爱！！！<br><img src="https://img-blog.csdnimg.cn/20200330190903552.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3l3c3lkd3Nibg==,size_16,color_FFFFFF,t_70" alt="树莓派"></p><h1 id="树莓派的特点"><a href="#树莓派的特点" class="headerlink" title="树莓派的特点"></a>树莓派的特点</h1><p>与常见的51单片机和STM32等这类的嵌入式微控制器相比，不仅可以完成相同的IO引脚控制之外，还能运行有相应的操作系统，可以完成更复杂的任务管理与调度，能够支持更上层应用的开发，为了开发者提供了更广阔的应用空间。比如开发语言的选择不仅仅只限于C语言，连接底层硬件与上层应用，可以实现物联网的云控制和云管理，也可以忽略树莓派的IO控制，使用树莓派搭建小型的网络服务器，做一些小型的测试开发和服务。</p><p>与一般的PC计算机平台相比，树莓派可以提供的IO引脚，能够直接控制其他底层硬件的功能，这是一般PC计算机做不到的，当然，树莓派体积小，成本低，照常可以完成一些PC任务与应用。</p><p>树莓派自带的摄像头拍摄夜空是有先例的，起码可以做到延时摄影。对于实时拍摄没有研究，但是仍然有必要测试。<br>树莓派自带的摄像头是500万像素，价格在26-29欧元（人民币200+左右）</p><h1 id="实时还是事后采集记录结果？"><a href="#实时还是事后采集记录结果？" class="headerlink" title="实时还是事后采集记录结果？"></a>实时还是事后采集记录结果？</h1><p>树莓派上的摄像机，是使用一个<code>raspivid</code>命令操作的。 抛开这个命令的其他参数，其<strong>输出数据有2种方式</strong>：</p><ul><li>将数据保存成文件，储存在SD卡上，以便事后读取;</li><li>将数据按照字节流的形式，直接输出到STDOUT标准输出中，可以实时获取。</li></ul><p>选择哪种方式，首先要考虑我们能否具有足够的采集数据的能力。</p><p><code>raspivid</code>命令可以调节相机模块的输出比特率。输出是以<code>H264</code>编码输出的，比特率一般默认是17Mbps，但是这个数字可以调小。 如果按照17Mbps算，就是一秒钟2.12兆字节。 我们记录数据或者获取数据的速度不能低于这个值，否则长时间录像可能造成树莓派的缓存充满，导致树莓派崩溃。</p><p>树莓派的网卡是使用了其USB总线，传送速度是100Mb/s或者12.5MB/s。 实际上后文的实验表明，目前能达到的传送速度只有<strong>3MB/s（TCP）</strong> 或者 <strong>6MB/s（UDP）</strong>。</p><p>如果使用SD卡存储，这个记录速度也是可以达到的，但是，SD卡有写入寿命，这是要考虑的。 例如，对于32GB的卡，即使我们能利用全部存储空间，以2MB/s的速度录像，也只能记录4.55小时。</p><h1 id="如何通过网络实时传送数据？"><a href="#如何通过网络实时传送数据？" class="headerlink" title="如何通过网络实时传送数据？"></a>如何通过网络实时传送数据？</h1><p><code>raspivid</code>命令的<code>-o</code>选项，就是用来指定输出文件的。 在<code>Linux</code>系统中，输出到文件并不等于写入到磁盘（这里是SD卡）。 我们仍然可能使用<code>RAMDisk</code>这种技术，让输出只是暂时存储在内存中，并稍后读取，然后删除之。 但是，树莓派的可用内存可能只有280MB，这最多只能记录差不多2分钟的视频。</p><p>如果我们有文件形式的摄像记录，那么就似乎可以使用文件传输的协议，例如<code>sftp, scp</code>等等登录到树莓派下载文件了。 然而这是不对的。这些协议在传输中使用了加密。</p><p>树莓派在向我们的电脑进行数据传送的时候，如果用这些协议，就必须先对发送的数据进行加密。 在互联网上，加密是很好的设计。但是在树莓派和电脑之间只用一根网线连接的时候，就不是了。 树莓派的运算能力是很有限的，使用加密只会让传送速度变慢，所以，不要使用加密！</p><p>我们使用最原始而简单的方法：<strong>使用netcat命令</strong>，在笔记本电脑这一端监听数据输入。 在树莓派这一端，我们让raspivid获取一定周期（比如10分钟，也许可以更长）的录像， 将结果设定为直接输出，然后利用Linux的管道机制，直接送进netcat发送。</p><h1 id="配置由树莓派和笔记本构成的网络"><a href="#配置由树莓派和笔记本构成的网络" class="headerlink" title="配置由树莓派和笔记本构成的网络"></a>配置由树莓派和笔记本构成的网络</h1><p>树莓派和笔记本电脑之间的连接，使用普通网线即可， 因为笔记本和树莓派上的网卡都能自动适应网线，设定正确的模式（正常来说要使用交叉网线）。</p><p>重要的一步是，笔记本电脑和树莓派连接后构成的网络中，需要手动为两个设备设定IP地址。 对于笔记本电脑的设定，就比较简单了。 我们将笔记本电脑和树莓派相连的网卡上，将电脑的<strong>IP地址设定为<code>xxx.xxx.x.xxx</code>，子网掩码为<code>255.255.255.0</code>，网关不要填</strong>。</p><p>配置树莓派的方法是，先将树莓派断电，然后取出所用的SD卡，用读卡器插回电脑。 在SD卡的<code>boot分区</code>中，有个<code>cmdline.txt</code>，这是树莓派开机时所用到的一些参数。</p><p>打开这个文件，会发现里面只有一行。这一行中用空格分开了很多设定参数。 我们在这一行的结尾，不添加空行，直接加上空格，然后写上：<code>ip=xxx.xxx.x.xxx</code></p><p>当然如果这一行里面已经有了ip=的参数，应该直接修改它。</p><p>这样的结果就是，树莓派开机之后，会自己选择这个IP地址作为自己的地址。 </p><h1 id="实现在笔记本上监听输入"><a href="#实现在笔记本上监听输入" class="headerlink" title="实现在笔记本上监听输入"></a>实现在笔记本上监听输入</h1><p><code>netcat命令</code>，在每收到一个文件的<code>EOF</code>（End Of File，表明文件已经到结尾），就会退出。 我们为了让接收能够连续进行，需要用脚本连续运行这个命令。 这样就会为每个新接收到的视频，在笔记本电脑这一端建立一个文件用来存储。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># -*- coding: utf-8 -*-</span><span class="token keyword">import</span> os<span class="token keyword">import</span> signal<span class="token keyword">import</span> subprocess<span class="token keyword">import</span> sys<span class="token keyword">import</span> uuid<span class="token comment" spellcheck="true"># 获取程序运行的本地目录，和用来存储接收结果的recv文件夹目录</span>BASEPATH <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>realpath<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>dirname<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>RECV <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>BASEPATH<span class="token punctuation">,</span> <span class="token string">'recv'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 如果接收目录不存在，就自动新建</span><span class="token keyword">print</span> <span class="token string">" *** Received files are put into: %s"</span> <span class="token operator">%</span> RECV<span class="token keyword">if</span> <span class="token operator">not</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>isdir<span class="token punctuation">(</span>RECV<span class="token punctuation">)</span><span class="token punctuation">:</span>    os<span class="token punctuation">.</span>system<span class="token punctuation">(</span><span class="token string">'mkdir -p %s'</span> <span class="token operator">%</span> RECV<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 下面的部分用来记录正在等待接收的文件。这个文件会以一个UUID.tmp的格式命名。</span><span class="token comment" spellcheck="true"># 在接收成功后，就会被重命名为UUID。（UUID是一个特定格式的唯一字符串，不会重复）。</span><span class="token comment" spellcheck="true"># 如果在接收过程中按下Ctrl+C，就会发送一个终止命令给程序，这样程序会退出，</span><span class="token comment" spellcheck="true"># 并删除没有接收完整的那个文件。</span>working <span class="token operator">=</span> <span class="token boolean">False</span>fullname <span class="token operator">=</span> <span class="token boolean">False</span><span class="token keyword">def</span> <span class="token function">sigint_handler</span><span class="token punctuation">(</span>signum<span class="token punctuation">,</span> frame<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">global</span> fullname<span class="token punctuation">,</span> working    <span class="token keyword">print</span> <span class="token string">"\n"</span>    <span class="token keyword">print</span> <span class="token string">" *** SIGINT detected. End the program."</span>    <span class="token keyword">if</span> working <span class="token operator">and</span> fullname <span class="token operator">!=</span> <span class="token boolean">False</span><span class="token punctuation">:</span>        <span class="token keyword">print</span> <span class="token string">" *** Unfinished recording deleted."</span>        os<span class="token punctuation">.</span>system<span class="token punctuation">(</span><span class="token string">'rm -f %s.tmp'</span> <span class="token operator">%</span> fullname<span class="token punctuation">)</span>    exit<span class="token punctuation">(</span><span class="token punctuation">)</span>signal<span class="token punctuation">.</span>signal<span class="token punctuation">(</span>signal<span class="token punctuation">.</span>SIGINT<span class="token punctuation">,</span> sigint_handler<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 使用一个死循环来不断运行netcat(nc)命令。</span>n <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    recname <span class="token operator">=</span> str<span class="token punctuation">(</span>uuid<span class="token punctuation">.</span>uuid1<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span> <span class="token string">" [%8d] Listening for file [%s]. Use Ctrl+C to stop this script."</span> <span class="token operator">%</span> <span class="token punctuation">(</span>n<span class="token punctuation">,</span> recname<span class="token punctuation">)</span>    fullname <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>RECV<span class="token punctuation">,</span> recname<span class="token punctuation">)</span>    working <span class="token operator">=</span> <span class="token boolean">True</span> <span class="token comment" spellcheck="true"># 标记接收开始</span>    <span class="token comment" spellcheck="true"># 使用 nc -lp 10401 命令接收数据，表明端口为10401。</span>    subprocess<span class="token punctuation">.</span>call<span class="token punctuation">(</span><span class="token string">'nc -lp 10401 > %s.tmp'</span> <span class="token operator">%</span> fullname<span class="token punctuation">,</span> shell<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    os<span class="token punctuation">.</span>system<span class="token punctuation">(</span><span class="token string">'mv %s.tmp %s'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>fullname<span class="token punctuation">,</span> fullname<span class="token punctuation">)</span><span class="token punctuation">)</span>    working <span class="token operator">=</span> <span class="token boolean">False</span> <span class="token comment" spellcheck="true"># 标记接收完毕</span>    n <span class="token operator">+=</span> <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上文所述的脚本，在笔记本上运行之后，就会在本地开启10401端口，等待树莓派上传送的文件。 传送的会直接写入一个由UUID（全局唯一ID）标识的文件中，可以供以后处理。</p><h1 id="在树莓派上摄像并发送摄像结果"><a href="#在树莓派上摄像并发送摄像结果" class="headerlink" title="在树莓派上摄像并发送摄像结果"></a>在树莓派上摄像并发送摄像结果</h1><p>在树莓派上命令拍摄的方法是：</p><pre class="line-numbers language-powershell"><code class="language-powershell">$ raspivid <span class="token operator">-</span>o <span class="token operator">-</span> <span class="token operator">-</span>b 16000000 <span class="token operator">-</span>t 100000 <span class="token punctuation">|</span> nc xxx<span class="token punctuation">.</span>xxx<span class="token punctuation">.</span>x<span class="token punctuation">.</span>xxx 10401<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>这条指令的意义如下</strong>：</p><ul><li>-o -，使用-o设定输出，-表示直接输出到标准输出中，不写入文件。</li><li>-b 16000000，设定输出比特率为16000000 bit/s。这大约是2兆字节每秒。</li><li>-t 100000，设定录像时间为100000毫秒，亦即100秒。</li><li>| nc xxx.xxx.x.xxx 10401，使用管道|将结果导入到nc中，nc是发送模式，目标是xxx.xxx.x.xxx计算机上的10401端口。</li></ul>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> Raspberry Pi </tag>
            
            <tag> 网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数学分析模型（一）：数据的无量纲处理方法及示例（附完整代码）</title>
      <link href="/2020/12/01/dimensionless-processing-of-data/"/>
      <url>/2020/12/01/dimensionless-processing-of-data/</url>
      
        <content type="html"><![CDATA[<p>在对实际问题建模过程中，特别是在建立指标评价体系时，常常会面临不同类型的数据处理及融合。而各个指标之间由于计量单位和数量级的不尽相同，从而使得各指标间不具有可比性。在数据分析之前，通常需要先将数据标准化，利用标准化后的数据进行分析。数据标准化处理主要包括同趋化处理和无量纲化处理两个方面。数据的同趋化处理主要解决不同性质的数据问题，对不同性质指标直接累加不能正确反应不同作用力的综合结果，须先考虑改变逆指标数据性质，使所有指标对评价体系的作用力同趋化。数据无量纲化主要解决数据的不可比性，在此处主要介绍几种数据的无量纲化的处理方式。</p><h1 id="（1）极值化方法"><a href="#（1）极值化方法" class="headerlink" title="（1）极值化方法"></a>（1）极值化方法</h1><p>可以选择如下的三种方式：<br>（A）<img src="https://img-blog.csdnimg.cn/20200501113123953.png" alt="在这里插入图片描述">即每一个变量除以该变量取值的全距，标准化后的每个变量的取值范围限于[-1,1]。<br>(B) <img src="https://img-blog.csdnimg.cn/20200501113147271.png" alt="在这里插入图片描述">即每一个变量与变量最小值之差除以该变量取值的全距，标准化后各变量的取值范围限于[0,1]。<br>(C）<img src="https://img-blog.csdnimg.cn/20200501113205125.png" alt="在这里插入图片描述"> ，即每一个变量值除以该变量取值的最大值，标准化后使变量的最大取值为1。</p><p>采用极值化方法对变量数据无量纲化是通过变量取值的最大值和最小值将原始数据转换为界于某一特定范围的数据，从而消除量纲和数量级的影响。由于极值化方法对变量无量纲化过程中仅仅对该变量的最大值和最小值这两个极端值有关，而与其他取值无关，这使得该方法在改变各变量权重时过分依赖两个极端取值。</p><h1 id="（2）标准化方法"><a href="#（2）标准化方法" class="headerlink" title="（2）标准化方法"></a>（2）标准化方法</h1><p>利用<img src="https://img-blog.csdnimg.cn/20200501113333257.png" alt="在这里插入图片描述">来计算，即每一个变量值与其平均值之差除以该变量的标准差，无量纲化后各变量的平均值为0，标准差为1，从而消除量纲和数量级的影响。虽然该方法在无量纲化过程中利用了所有的数据信息，但是该方法在无量纲化后不仅使得转换后的各变量均值相同，且标准差也相同，即无量纲化的同时还消除了各变量在变异程度上的差异。</p><h1 id="（3）均值化方法"><a href="#（3）均值化方法" class="headerlink" title="（3）均值化方法"></a>（3）均值化方法</h1><p>计算公式为：<img src="https://img-blog.csdnimg.cn/20200501113415384.png" alt="在这里插入图片描述">，该方法在消除量纲和数量级影响的同时，保留了各变量取值差异程度上的信息。<br>（4）标准差化方法<br>计算公式为：<img src="https://img-blog.csdnimg.cn/20200501113444104.png" alt="在这里插入图片描述">。该方法是标准化方法的基础上的一种变形，两者的差别仅在无量纲化后各变量的均值上，标准化方法处理后各变量的均值为0，而标准差化方法处理后各变量均值为原始变量均值与标准差的比值。</p><p>综上所述，针对不同类型的数据，可以选择相应的无量纲化方法。如下的示例就是一个典型的评价体系中无量纲化的范例。</p><h1 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h1><p>近年来我国淡水湖水质富营养化的污染日益严重，如何对湖泊水质的富营养化进行综合评价与治理是摆在我们面前的任务，下面两个表格分别为我国5个湖泊的实测数据和湖泊水质评价标准。</p><p>表1  全国五个主要湖泊评价参数的实测数据<br><img src="https://img-blog.csdnimg.cn/20200501113549269.png" alt="全国五个主要湖泊评价参数的实测数据"><br>表2  湖泊水质评价标准<br><img src="https://img-blog.csdnimg.cn/20200501113628784.png" alt="湖泊水质评价标准"></p><h2 id="要求"><a href="#要求" class="headerlink" title="要求"></a>要求</h2><p>（1）试用以上数据，分析总磷，耗氧量，透明度，总氨这4个指标对湖泊水质评价富营养化的作用。<br>（2）对这5个湖泊的水质综合评价，确定水质等级。</p><p>在进行综合评价之前，首先要对评价的指标进行分析。通常评价指标分成效益型，成本型和固定型指标。效益型指标是指那些数值越大影响力越大的统计指标（也称正向型指标）；成本型指标是指数值越小越好的指标（也称逆向型指标）；而固定型指标是指数值越接近于某个常数越好的指标（也称适度型指标）。如果每个评价指标的属性不一样，则在综合评价时就容易发生偏差，必须先对各评价指标统一属性。</p><h2 id="建模步骤"><a href="#建模步骤" class="headerlink" title="建模步骤"></a>建模步骤</h2><p>（ⅰ）建立无量纲化实测数据矩阵和评价标准矩阵，其中实测数据矩阵和等级标准矩阵如下，<br><img src="https://img-blog.csdnimg.cn/20200501113736824.png" alt="实测数据矩阵和等级标准矩阵"><br>然后建立无量纲化实测数据矩阵和无量纲化等级标准矩阵，其中<br><img src="https://img-blog.csdnimg.cn/20200501113756112.png" alt="a和b"><br>得到<br><img src="https://img-blog.csdnimg.cn/20200501114209393.png" alt="A"></p><p><img src="https://img-blog.csdnimg.cn/20200501114201749.png" alt="B"></p><p>（ⅱ）计算各评价指标的权重<br>计算矩阵B的各行向量的均值和标准差，<br><img src="https://img-blog.csdnimg.cn/20200501114144147.png" alt="均值和标准差"></p><p>然后计算变异系数<img src="https://img-blog.csdnimg.cn/20200501114223682.png" alt="变异系数"><br>最后对变异系数归一化得到各指标的权重为<br><img src="https://img-blog.csdnimg.cn/20200501114336124.png" alt="指标的权重"><br>（ⅲ）建立各湖泊水质的综合评价模型<br>通常可以利用向量之间的距离来衡量两个向量之间的接近程度，在Matlab中，有以下的函数命令来计算向量之间的距离；<br>dist(w,p): 计算中的每个行向量和中每个列向量之间的欧式距离；<br>mandist(w,p): 绝对值距离。<br>计算中各行向量到中各列向量之间的欧氏距离，<br><img src="https://img-blog.csdnimg.cn/20200501114434381.png" alt="各列向量之间的欧氏距离"><br>若<img src="https://img-blog.csdnimg.cn/20200501114446171.png" alt="在这里插入图片描述">，则第个湖泊属于第级。<br><img src="https://img-blog.csdnimg.cn/20200501114457329.png" alt="在这里插入图片描述"><br>这说明杭州西湖，武汉东湖都属于极富营养水质，青海湖属于中营养水质，而巢湖和滇池属于富营养水质。</p><p>同时也可以计算中各行向量到中各列向量之间的绝对值距离<img src="https://img-blog.csdnimg.cn/202005011145144.png" alt="在这里插入图片描述"><br>若<img src="https://img-blog.csdnimg.cn/20200501114526659.png" alt="在这里插入图片描述">，则第个湖泊属于第级。<br><img src="https://img-blog.csdnimg.cn/20200501114535650.png" alt="在这里插入图片描述"><br>其评价结果与利用欧氏距离得到的评价结果完全一样。</p><p>所以，从上面的计算可以看出，尽管欧氏距离和绝对值距离的意义完全不一样，但对湖泊水质的评价等级是一样的，这表明了方法的稳定性。</p><h1 id="程序"><a href="#程序" class="headerlink" title="程序"></a>程序</h1><pre class="line-numbers language-powershell"><code class="language-powershell">X=<span class="token punctuation">[</span>130 10<span class="token punctuation">.</span>3 0<span class="token punctuation">.</span>35 2<span class="token punctuation">.</span>76<span class="token punctuation">;</span>105 10<span class="token punctuation">.</span>7 0<span class="token punctuation">.</span>4 2<span class="token punctuation">;</span>20 1<span class="token punctuation">.</span>4 4<span class="token punctuation">.</span>5 0<span class="token punctuation">.</span>2230 6<span class="token punctuation">.</span>26 0<span class="token punctuation">.</span>25 1<span class="token punctuation">.</span>67 <span class="token punctuation">;</span>20 10<span class="token punctuation">.</span>13 0<span class="token punctuation">.</span>5 0<span class="token punctuation">.</span>23<span class="token punctuation">]</span><span class="token punctuation">;</span>A1=X<span class="token punctuation">(</span>:<span class="token punctuation">,</span>1<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token operator">/</span>130<span class="token punctuation">;</span>A2=X<span class="token punctuation">(</span>:<span class="token punctuation">,</span>2<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token operator">/</span>10<span class="token punctuation">.</span>7<span class="token punctuation">;</span>A3=0<span class="token punctuation">.</span>25<span class="token punctuation">.</span><span class="token operator">/</span>X<span class="token punctuation">(</span>:<span class="token punctuation">,</span>3<span class="token punctuation">)</span><span class="token punctuation">;</span>A4=X<span class="token punctuation">(</span>:<span class="token punctuation">,</span>4<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token operator">/</span>2<span class="token punctuation">.</span>76<span class="token punctuation">;</span>A=<span class="token namespace">[A1 A2 A3 A4]</span><span class="token punctuation">;</span>Y=<span class="token punctuation">[</span>1 4 23 100 660<span class="token punctuation">;</span>0<span class="token punctuation">.</span>09 0<span class="token punctuation">.</span>36 1<span class="token punctuation">.</span>8 7<span class="token punctuation">.</span>1 27<span class="token punctuation">.</span>1<span class="token punctuation">;</span>37 12 2<span class="token punctuation">.</span>4 0<span class="token punctuation">.</span>55 0<span class="token punctuation">.</span>17<span class="token punctuation">;</span>0<span class="token punctuation">.</span>02 0<span class="token punctuation">.</span>06 0<span class="token punctuation">.</span>31 1<span class="token punctuation">.</span>2 4<span class="token punctuation">.</span>6<span class="token punctuation">]</span><span class="token punctuation">;</span>B1=Y<span class="token punctuation">(</span>1<span class="token punctuation">,</span>:<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token operator">/</span>660<span class="token punctuation">;</span>B2=Y<span class="token punctuation">(</span>2<span class="token punctuation">,</span>:<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token operator">/</span>27<span class="token punctuation">.</span>1<span class="token punctuation">;</span>B3=0<span class="token punctuation">.</span>17<span class="token punctuation">.</span><span class="token operator">/</span>Y<span class="token punctuation">(</span>3<span class="token punctuation">,</span>:<span class="token punctuation">)</span><span class="token punctuation">;</span>B4=Y<span class="token punctuation">(</span>4<span class="token punctuation">,</span>:<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token operator">/</span>4<span class="token punctuation">.</span>6<span class="token punctuation">;</span>B=<span class="token namespace">[B1;B2;B3;B4]</span><span class="token punctuation">;</span><span class="token operator">%</span> dist是一个欧式距离加权函数，给一个输入使用权值，去获得加权的输入<span class="token operator">%</span> dist<span class="token punctuation">(</span>W<span class="token punctuation">,</span>P<span class="token punctuation">)</span>中：W——S×R的权值矩阵；P——R×Q的矩阵，表示Q个输入（列）向量<span class="token operator">%</span> dist<span class="token punctuation">(</span>w<span class="token punctuation">,</span>p<span class="token punctuation">)</span>: 计算中的每个行向量和中每个列向量之间的欧式距离；jd=dist<span class="token punctuation">(</span>A<span class="token punctuation">,</span>B<span class="token punctuation">)</span><span class="token punctuation">;</span>jd<span class="token operator">%</span> mandist<span class="token punctuation">(</span>w<span class="token punctuation">,</span>p<span class="token punctuation">)</span>: 绝对值距离mjd=mandist<span class="token punctuation">(</span>A<span class="token punctuation">,</span>B<span class="token punctuation">)</span><span class="token punctuation">;</span>mjd<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h1><p><img src="https://img-blog.csdnimg.cn/20200501161822708.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3l3c3lkd3Nibg==,size_16,color_FFFFFF,t_70" alt="运行结果"></p><h1 id="备注"><a href="#备注" class="headerlink" title="备注"></a>备注</h1><p><strong>各位老铁养成习惯，看完点个赞呗，随便也来个关注！！！</strong> </p><p><strong>各位老铁养成习惯，看完点个赞呗，随便也来个关注！！！</strong></p><p><strong>各位老铁养成习惯，看完点个赞呗，随便也来个关注！！！</strong> </p>]]></content>
      
      
      <categories>
          
          <category> 数学建模 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数学分析模型 </tag>
            
            <tag> matlab </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于混沌Logistic加密算法的图片加密与还原</title>
      <link href="/2020/12/01/ji-yu-hun-dun-logistic-jia-mi-suan-fa-de-tu-pian-jia-mi-yu-huan-yuan/"/>
      <url>/2020/12/01/ji-yu-hun-dun-logistic-jia-mi-suan-fa-de-tu-pian-jia-mi-yu-huan-yuan/</url>
      
        <content type="html"><![CDATA[<h1 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h1><blockquote><p>一种基于混沌Logistic加密算法的图片加密与还原的方法，并利用Lena图和Baboon图来验证这种加密算法的加密效果。为了能够体现该算法在图片信息加密的效果，本文还采用了普通行列置乱加密算法和像素点的RGB的值的缩放算法这两种算法对相同的图片的图片进行处理，利用matlab通过显示加密过后的图片以及直方图分析可以很直观的发现混沌Logistic加密算法对图片信息加密的效果更好，并且很好地隐藏了原始图像的统计特性，能够有效地抵御基于图像像素值的统计攻击，达到了图像加密的效果。</p></blockquote><h1 id="混沌Logistic映射的理论"><a href="#混沌Logistic映射的理论" class="headerlink" title="混沌Logistic映射的理论"></a>混沌Logistic映射的理论</h1><h2 id="混沌的基本概念"><a href="#混沌的基本概念" class="headerlink" title="混沌的基本概念"></a>混沌的基本概念</h2><p>1975年，美国数学家约克和美籍华人李天岩发表了《周期3意味着混沌》的文章，首次提出了“混沌”—词，阐述了混沌的数学定义，对混沌学的发展具有重大意义。自此以后，混沌研究开始蓬勃发展。<br>混沌是指在确定性动力学系统中，由于对初值敏感而表现出的类似随机的、不可预测的运动。混沌是确定的非线性系统中出现的内在随机性现象，其变化并非随机确貌似随机。</p><h2 id="Logistic映射方程"><a href="#Logistic映射方程" class="headerlink" title="Logistic映射方程"></a>Logistic映射方程</h2><p>Logistic映射是一个典型的非线性的迭代方程，如式所示：<br>                               <img src="https://img-blog.csdnimg.cn/20200322115202600.png" alt="在这里插入图片描述"><br>称为Logistic映射的控制参数，对任意的k有<img src="https://img-blog.csdnimg.cn/20200322115314240.png" alt="在这里插入图片描述">，其中k为迭代时间步。==Logistic映射的动态行为与控制参数u密切相关==，对于不同的u值系统将呈现不同的特性（即当k趋于无穷大，xk的变化情况）。其中==Logistic映射有两个主要的参数，一个是初值x0，一个是系统参数μ==，研究表明，==当 0&lt;μ&lt;=3.5699456时，Logistic呈现出周期性；而当映射方程满足0&lt;x0&lt;1和3.5699456&lt;μ&lt;=4这两个条件时，Logistic映射处于混沌状态==，即一种无序的、不可预测的、混乱的、摸不到头、摸不到尾的状态。对给定的初始值x0，生成的序列是非周期性、非收敛以及对初始条件敏感的。</p><blockquote><p>有界性<br>混沌是有界的，它的运动轨线始终局限于一个确定的区域，这个区域称为混沌吸引域。由图 所示，无论控制参数μ怎么变，迭代值xn始终在(0,1)之间。</p></blockquote><p><img src="https://img-blog.csdnimg.cn/20200322120312766.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3l3c3lkd3Nibg==,size_16,color_FFFFFF,t_70" alt="**不同控制参数μ下的Logistic分岔图**"></p><h1 id="混沌Logistic映射与其他加密算法介绍"><a href="#混沌Logistic映射与其他加密算法介绍" class="headerlink" title="混沌Logistic映射与其他加密算法介绍"></a>混沌Logistic映射与其他加密算法介绍</h1><h2 id="普通行列置乱加密算法"><a href="#普通行列置乱加密算法" class="headerlink" title="普通行列置乱加密算法"></a>普通行列置乱加密算法</h2><h3 id="普通置乱加密算法的流程"><a href="#普通置乱加密算法的流程" class="headerlink" title="普通置乱加密算法的流程"></a>普通置乱加密算法的流程</h3><p>将读入的水印图片，先获取图片的大小，得到原始图片矩阵，首先随机打乱各行，输出打乱后的矩阵，再将这个矩阵随机打乱各列，最后图像成功加密，显示加密图像。算法流程框图如图：</p><p><img src="https://img-blog.csdnimg.cn/20200322120508960.png" alt="在这里插入图片描述"></p><h3 id="算法分析"><a href="#算法分析" class="headerlink" title="算法分析"></a>算法分析</h3><pre><code>s = size(handles.img);r = randsample(s(1), s(1)); RGBS = handles.img(r, :, :);c = randsample(s(2), s(2)); RGBSS = RGBS(:, c, :);axes(handles.axes2);        imshow(RGBSS); title(&#39;普通置乱加密图像&#39;);figure(2);hist_im=histogram(RGBSS); %加密后直方图title(&#39;普通置乱加密直方图&#39;);</code></pre><h2 id="像素点的RGB值缩放加密"><a href="#像素点的RGB值缩放加密" class="headerlink" title="像素点的RGB值缩放加密"></a>像素点的RGB值缩放加密</h2><h3 id="像素点的RGB值缩放加密算法的流程"><a href="#像素点的RGB值缩放加密算法的流程" class="headerlink" title="像素点的RGB值缩放加密算法的流程"></a>像素点的RGB值缩放加密算法的流程</h3><p>首先读入原始图片，通过size获取水印图片的大小矩阵，接着获取图片各R、G、B的值，然后将获取到的RGB值分别扩大20倍并将值赋给r，最后再将r与将水印图片转换成double类型的矩阵进行点乘运算实现图像的成功加密。算法流程框图如图：</p><p><img src="https://img-blog.csdnimg.cn/20200322120755105.png" alt="在这里插入图片描述"></p><h3 id="算法分析-1"><a href="#算法分析-1" class="headerlink" title="算法分析"></a>算法分析</h3><pre><code>s = size(handles.img);r = rand(s(1), s(2), s(3)) * 20;RGBD = im2double(handles.img);RGB_jiami = RGBD .* r;axes(handles.axes2);      imshow(RGB_jiami); title(&#39;像素点的RGB值缩放加密图像&#39;);figure(3);hist_im=histogram(RGB_jiami); title(&#39;像素点的RGB值缩放加密直方图&#39;);</code></pre><h2 id="混沌Logistic映射加密算法"><a href="#混沌Logistic映射加密算法" class="headerlink" title="混沌Logistic映射加密算法"></a>混沌Logistic映射加密算法</h2><h3 id="混沌Logistic映射加密算法模型"><a href="#混沌Logistic映射加密算法模型" class="headerlink" title="混沌Logistic映射加密算法模型"></a>混沌Logistic映射加密算法模型</h3><p>读入待处理的原始图片，通过加密密钥进入混沌序列，通过混沌系统设计加密算法，实现加密目的；再输入解密密钥，把加密过程逆向运算即可得到解密图像。系统参数u和初值x0设置成密钥。混沌Logistic映射加密算法模型如图：</p><p><img src="https://img-blog.csdnimg.cn/20200322121024286.png" alt="在这里插入图片描述"></p><p>当迭代n次后，我们就得到了x1、x2、…，xn这n个值，这就是一个混沌序列，是一维的，称作序列A，也就是我们想要得到的序列，在MATLAB中，可以看出xi（i=1,2,…,n）的取值是在(0,1)之间的，就像图像灰度值是在(0,255)之间一样。那么我们把这个一维序列归一化到(0,255)之间得到序列B。异或过程如图：</p><p><img src="https://img-blog.csdnimg.cn/20200322121130568.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3l3c3lkd3Nibg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="算法分析-2"><a href="#算法分析-2" class="headerlink" title="算法分析"></a>算法分析</h3><pre><code>u=4;   for i=1:500     x=u*x*(1-x); end fprintf(&#39;x(k+1)=%d\n&#39;,x); A=zeros(1,M*N); A(1)=x;   for i=1:M*N-1     A(i+1)=u*A(i)*(1-A(i)); endB=uint8(255*A); %Imgn=reshape(B,M,N);   C=zeros(M,N); for x=1:M     for y=1:N         C(x,y)=handles.img(x,y);     endendC; D=uint8(C); Rod=bitxor(D,Imgn); Rod; rod=reshape(Rod,M,N/3,3); </code></pre><h1 id="验证与性能分析"><a href="#验证与性能分析" class="headerlink" title="验证与性能分析"></a>验证与性能分析</h1><h2 id="Matlab-GUI操作界面"><a href="#Matlab-GUI操作界面" class="headerlink" title="Matlab GUI操作界面"></a>Matlab GUI操作界面</h2><p>使用的是<strong>MATLAB GUI可视化仿真平台</strong>。它是采用图形方式显示的计算机操作用户界面，是MATLAB用户可视化交互式的工具，运用GUI生成的操作界面用户可以不用浏览繁冗的代码而进行操作。如图是设计的<strong>GUI操作界面</strong><br><img src="https://img-blog.csdnimg.cn/20200322121557542.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3l3c3lkd3Nibg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong><em>看到这个界面是不是很不错，对的。。。你没看错MATLAB GUI确实是这么厉害。。。。。。。</em></strong></p><h2 id="普通行列置乱加密实现"><a href="#普通行列置乱加密实现" class="headerlink" title="普通行列置乱加密实现"></a>普通行列置乱加密实现</h2><p>Lena原图像、加密图像、解密图像<br><img src="https://img-blog.csdnimg.cn/20200322121749624.png" alt="在这里插入图片描述"><br>Baboon原图像、加密图像、解密图像<br><img src="https://img-blog.csdnimg.cn/20200322121818930.png" alt="在这里插入图片描述"></p><h2 id="像素点的RGB值的缩放加密实现"><a href="#像素点的RGB值的缩放加密实现" class="headerlink" title="像素点的RGB值的缩放加密实现"></a>像素点的RGB值的缩放加密实现</h2><p>Lena原图像、加密图像、解密图像<br><img src="https://img-blog.csdnimg.cn/20200322121940411.png" alt="在这里插入图片描述"><br>Baboon原图像、加密图像、解密图像<br><img src="https://img-blog.csdnimg.cn/2020032212200941.png" alt="在这里插入图片描述"></p><h2 id="混沌Logistic映射加密实现"><a href="#混沌Logistic映射加密实现" class="headerlink" title="混沌Logistic映射加密实现"></a>混沌Logistic映射加密实现</h2><p>Lena原图像、加密图像、解密图像<br><img src="https://img-blog.csdnimg.cn/20200322122101398.png" alt="在这里插入图片描述"><br>Baboon原图像、加密图像、解密图像<br><img src="https://img-blog.csdnimg.cn/2020032212213175.png" alt="在这里插入图片描述"></p><h2 id="直方图性能分析"><a href="#直方图性能分析" class="headerlink" title="直方图性能分析"></a>直方图性能分析</h2><blockquote><p>这里就只对lena图进行直方图分析，Baboon图大致和lena图一样。</p></blockquote><p>Lena图的普通置乱与混沌Logistic加密的直方图<br><img src="https://img-blog.csdnimg.cn/20200322122315134.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3l3c3lkd3Nibg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>普通行列置乱图像的直方图与原始图像的直方图相同，且像素点的分布都不均匀，而混沌Logistic加密图像的直方图的像素点分布相对均匀，很好地隐藏了原始图像的统计特性，达到了图像加密的效果。</p><p>Lena图的像素点的RGB缩放与混沌Logistic加密的直方图<br><img src="https://img-blog.csdnimg.cn/20200322125400671.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3l3c3lkd3Nibg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>由直方图可知：像素点的RGB缩放图像的直方图与原始图像的直方图不相同且像素点的分布都不均匀，而混沌Logistic加密图像的直方图的像素点分布相对均匀，很好地隐藏了原始图像的统计特性。</p><p>完整代码以上传至我的github：<a href="https://github.com/gain-wyj/-Logistic-" target="_blank" rel="noopener">完整代码</a></p><blockquote><p><strong><em>你的三连击是我的荣幸！！！！！</em></strong></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 数字图像处理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> matlab </tag>
            
            <tag> Logistic加密 </tag>
            
            <tag> 数字图像处理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>十大经典排序算法整理汇总（附代码）</title>
      <link href="/2020/02/16/sort-algorithms/"/>
      <url>/2020/02/16/sort-algorithms/</url>
      
        <content type="html"><![CDATA[<blockquote><p>关注公众号【做一个柔情的程序猿】，每日算法干货马上就来！</p></blockquote><p><img src="/medias/contact.jpg" alt></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本文整理并总结了十大经典的排序算法（冒泡排序、选择排序、插入排序、快速排序、归并排序、希尔排序、计数排序、基数排序、桶排序、堆排序）的时间复杂度、空间复杂度等性质。</p><p><strong>本文并不会详细讲解每种排序算法的原理</strong>，网上有很多很好的教程，大家可以自己去搜了看。</p><p>最后我还亲自手写了十种排序算法的 c++ 代码，大家可以用来通过 <a href="https://leetcode-cn.com/problems/sort-an-array/" title="LeetCode 912. 排序数组" target="_blank" rel="noopener">LeetCode 912. 排序数组</a> 这道题。</p><h2 id="性质汇总"><a href="#性质汇总" class="headerlink" title="性质汇总"></a>性质汇总</h2><blockquote><p>如果发现表中有错误，请留言告知。</p></blockquote><table><thead><tr><th>算法</th><th>最好</th><th>最坏</th><th>平均</th><th>空间</th><th align="center">稳定性</th><th align="center">是否基于比较</th></tr></thead><tbody><tr><td>冒泡排序</td><td>$O(n)$</td><td>$O(n^2)$</td><td>$O(n^2)$</td><td>$O(1)$</td><td align="center">$\checkmark$</td><td align="center">$\checkmark$</td></tr><tr><td>选择排序</td><td>$O(n^2)$</td><td>$O(n^2)$</td><td>$O(n^2)$</td><td>$O(1)$</td><td align="center">$\times$</td><td align="center">$\checkmark$</td></tr><tr><td>插入排序</td><td>$O(n)$</td><td>$O(n^2)$</td><td>$O(n^2)$</td><td>$O(1)$</td><td align="center">$\checkmark$</td><td align="center">$\checkmark$</td></tr><tr><td>快速排序</td><td>$O(n\log n)$</td><td>$O(n^2)$</td><td>$O(n\log n)$</td><td>$O(\log n)$~$O(n)$</td><td align="center">$\times$</td><td align="center">$\checkmark$</td></tr><tr><td>归并排序</td><td>$O(n\log n)$</td><td>$O(n\log n)$</td><td>$O(n\log n)$</td><td>$O(n)$</td><td align="center">$\checkmark$</td><td align="center">$\checkmark$</td></tr><tr><td>希尔排序</td><td>$O(n^{1.3})$</td><td>$O(n^2)$</td><td>$O(n\log n)$~$O(n^2)$</td><td>$O(1)$</td><td align="center">$\times$</td><td align="center">$\checkmark$</td></tr><tr><td>计数排序</td><td>$O(n+k)$</td><td>$O(n+k)$</td><td>$O(n+k)$</td><td>$O(n+k)$</td><td align="center">$\checkmark$</td><td align="center">$\times$</td></tr><tr><td>基数排序</td><td>$O(nk)$</td><td>$O(nk)$</td><td>$O(nk)$</td><td>$O(n+k)$</td><td align="center">$\checkmark$</td><td align="center">$\times$</td></tr><tr><td>桶排序</td><td>$O(n)$</td><td>$O(n)$</td><td>$O(n)$</td><td>$O(n+m)$</td><td align="center">$\checkmark$</td><td align="center">$\times$</td></tr><tr><td>堆排序</td><td>$O(n\log n)$</td><td>$O(n\log n)$</td><td>$O(n\log n)$</td><td>$O(1)$</td><td align="center">$\times$</td><td align="center">$\checkmark$</td></tr></tbody></table><blockquote><p>如果表格显示有问题的话，还可以直接看下面的汇总图：</p></blockquote><p><img src="1.png" alt="十大经典排序算法性质汇总"></p><h3 id="维基百科"><a href="#维基百科" class="headerlink" title="维基百科"></a>维基百科</h3><p>我觉得还是英文维基百科讲的比较详细、严谨。如果大家看的比较累的话，可以自己百度搜索相应的教程。</p><p><strong>冒泡排序</strong><br><a href="https://en.wikipedia.org/wiki/Bubble_sort" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Bubble_sort</a></p><p><strong>选择排序</strong><br><a href="https://en.wikipedia.org/wiki/Selection_sort" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Selection_sort</a></p><p><strong>插入排序</strong><br><a href="https://en.wikipedia.org/wiki/Insertion_sort" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Insertion_sort</a></p><p><strong>快速排序</strong><br><a href="https://en.wikipedia.org/wiki/Quicksort" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Quicksort</a></p><p><strong>归并排序</strong><br><a href="https://en.wikipedia.org/wiki/Merge_sort" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Merge_sort</a></p><p><strong>希尔排序</strong><br><a href="https://en.wikipedia.org/wiki/Shellsort" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Shellsort</a></p><p><strong>计数排序</strong><br><a href="https://en.wikipedia.org/wiki/Counting_sort" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Counting_sort</a></p><p><strong>基数排序</strong><br><a href="https://en.wikipedia.org/wiki/Radix_sort" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Radix_sort</a></p><p><strong>桶排序</strong><br><a href="https://en.wikipedia.org/wiki/Bucket_sort" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Bucket_sort</a></p><p><strong>堆排序</strong><br><a href="https://en.wikipedia.org/wiki/Heapsort" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Heapsort</a></p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><p>所有的排序算法接口都是相同的，也就是 <code>vector&lt;int&gt; xxxSort(vector&lt;int&gt;&amp; nums)</code> 。只需要你传入一个 <code>vector&lt;int&gt;</code> 类型的数组，就能返回排序后的结果。</p><p>运行下来可以发现，桶排序速度是比较快的。而冒泡排序、选择排序和插入排序因为时间复杂度太高无法通过本题，基数排序因为无法处理负数也不能通过本题。</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">sortArray</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">quickSort</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 冒泡排序（超时）</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">bubbleSort</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> n<span class="token number">-2</span><span class="token punctuation">;</span> j <span class="token operator">>=</span> i<span class="token punctuation">;</span> <span class="token operator">--</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> nums<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token function">swap</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> nums<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 选择排序（超时）</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">selectSort</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> idx <span class="token operator">=</span> i<span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> nums<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    idx <span class="token operator">=</span> j<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token function">swap</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> nums<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 插入排序（超时）</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">insertSort</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token punctuation">;</span> j <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> nums<span class="token punctuation">[</span>j<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token operator">--</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">swap</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>j<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> nums<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 快速排序（24 ms）</span>    <span class="token keyword">void</span> <span class="token function">qSort</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>l <span class="token operator">>=</span> r<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> m <span class="token operator">=</span> l<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> l<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> r<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> nums<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">swap</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>m<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token function">swap</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">qSort</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> l<span class="token punctuation">,</span> m<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">qSort</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> m<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">quickSort</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">qSort</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> n<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> nums<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 归并排序（192 ms）</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">mSort</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>l <span class="token operator">>=</span> r<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">{</span>nums<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> m <span class="token operator">=</span> l<span class="token operator">+</span><span class="token punctuation">(</span>r<span class="token operator">-</span>l<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> lnums <span class="token operator">=</span> <span class="token function">mSort</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> l<span class="token punctuation">,</span> m<span class="token punctuation">)</span><span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> rnums <span class="token operator">=</span> <span class="token function">mSort</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> m<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> res<span class="token punctuation">;</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> m<span class="token operator">-</span>l <span class="token operator">&amp;&amp;</span> j <span class="token operator">&lt;=</span> r<span class="token operator">-</span>m<span class="token number">-1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>lnums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> rnums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>lnums<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>rnums<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> m<span class="token operator">-</span>l<span class="token punctuation">)</span> <span class="token punctuation">{</span>            res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>lnums<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;=</span> r<span class="token operator">-</span>m<span class="token number">-1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>rnums<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">mergeSort</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        nums <span class="token operator">=</span> <span class="token function">mSort</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> n<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> nums<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 归并排序 + 非递归（80 ms）</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">mergeSortNR</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> len <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> len <span class="token operator">&lt;&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> l <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> l <span class="token operator">&lt;</span> n<span class="token operator">-</span>len<span class="token punctuation">;</span> l <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">2</span><span class="token operator">*</span>len<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">int</span> m <span class="token operator">=</span> l<span class="token operator">+</span>len<span class="token number">-1</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> r <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>n<span class="token number">-1</span><span class="token punctuation">,</span> l<span class="token operator">+</span><span class="token number">2</span><span class="token operator">*</span>len<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> res<span class="token punctuation">;</span>                <span class="token keyword">int</span> i <span class="token operator">=</span> l<span class="token punctuation">,</span> j <span class="token operator">=</span> m<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> m <span class="token operator">&amp;&amp;</span> j <span class="token operator">&lt;=</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                        res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> m<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;=</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> l<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> r<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> res<span class="token punctuation">[</span>i<span class="token operator">-</span>l<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> nums<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 希尔排序（40 ms）</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">shellSort</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> gap <span class="token operator">=</span> n<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span> gap <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span> gap <span class="token operator">/</span><span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> gap<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token punctuation">;</span> j<span class="token operator">-</span>gap <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>j<span class="token operator">-</span>gap<span class="token punctuation">]</span> <span class="token operator">></span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span> j <span class="token operator">-</span><span class="token operator">=</span> gap<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token function">swap</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>j<span class="token operator">-</span>gap<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> nums<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 计数排序（32 ms）</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">countSort</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>n<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> minv <span class="token operator">=</span> <span class="token operator">*</span><span class="token function">min_element</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> nums<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> maxv <span class="token operator">=</span> <span class="token operator">*</span><span class="token function">max_element</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> nums<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> m <span class="token operator">=</span> maxv<span class="token operator">-</span>minv<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">count</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            count<span class="token punctuation">[</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span>minv<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> res<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> count<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>                res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>i<span class="token operator">+</span>minv<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 基数排序（不适用于负数）</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">radixSort</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> maxv <span class="token operator">=</span> <span class="token operator">*</span><span class="token function">max_element</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> nums<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> maxd <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>maxv <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            maxv <span class="token operator">/</span><span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>            maxd<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">rank</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> base <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>maxd <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            count<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>                count<span class="token punctuation">[</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">/</span>base<span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>                count<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> count<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> n<span class="token number">-1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token operator">--</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>                rank<span class="token punctuation">[</span><span class="token operator">--</span>count<span class="token punctuation">[</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">/</span>base<span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>                nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> rank<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            maxd<span class="token operator">--</span><span class="token punctuation">;</span>            base <span class="token operator">*</span><span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> nums<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 桶排序 (20 ms)</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">bucketSort</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> maxv <span class="token operator">=</span> <span class="token operator">*</span><span class="token function">max_element</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> nums<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> minv <span class="token operator">=</span> <span class="token operator">*</span><span class="token function">min_element</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> nums<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> bs <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> m <span class="token operator">=</span> <span class="token punctuation">(</span>maxv<span class="token operator">-</span>minv<span class="token punctuation">)</span><span class="token operator">/</span>bs<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token operator">></span> <span class="token function">bucket</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            bucket<span class="token punctuation">[</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span>minv<span class="token punctuation">)</span><span class="token operator">/</span>bs<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> idx <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> sz <span class="token operator">=</span> bucket<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            bucket<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">quickSort</span><span class="token punctuation">(</span>bucket<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> sz<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>                nums<span class="token punctuation">[</span>idx<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> bucket<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> nums<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 堆排序（32 ms）</span>    <span class="token keyword">void</span> <span class="token function">adjust</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> p<span class="token punctuation">,</span> <span class="token keyword">int</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">*</span>p<span class="token operator">+</span><span class="token number">1</span> <span class="token operator">&lt;</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> c1 <span class="token operator">=</span> <span class="token number">2</span><span class="token operator">*</span>p<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> c2 <span class="token operator">=</span> <span class="token number">2</span><span class="token operator">*</span>p<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token punctuation">(</span>c2<span class="token operator">&lt;</span>s <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>c2<span class="token punctuation">]</span><span class="token operator">></span>nums<span class="token punctuation">[</span>c1<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">?</span> c2 <span class="token operator">:</span> c1<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>c<span class="token punctuation">]</span> <span class="token operator">></span> nums<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token function">swap</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token keyword">break</span><span class="token punctuation">;</span>            p <span class="token operator">=</span> c<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">heapSort</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> n<span class="token operator">/</span><span class="token number">2</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token operator">--</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">adjust</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> i<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> n<span class="token number">-1</span><span class="token punctuation">;</span> i <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token operator">--</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">swap</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">adjust</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> nums<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 编程算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
